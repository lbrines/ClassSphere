name: CI - Tests & Lints

# Workflow simplificado para CI únicamente
# Docker images se construyen localmente y se publican manualmente
# Ver: scripts/publish-docker-images.sh

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  # ==========================================
  # Backend Tests
  # ==========================================
  backend-tests:
    name: Backend Tests (Go)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        working-directory: ./backend
        run: go mod download

      - name: Run tests
        working-directory: ./backend
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        if: always()
        continue-on-error: true
        with:
          files: ./backend/coverage.out
          flags: backend

  # ==========================================
  # Frontend Tests
  # ==========================================
  frontend-tests:
    name: Frontend Tests (Angular)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ./frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run linter
        working-directory: ./frontend
        run: npm run lint || true

      - name: Run tests
        working-directory: ./frontend
        run: npm test -- --watch=false --browsers=ChromeHeadless || true

      - name: Build
        working-directory: ./frontend
        run: npm run build

  # ==========================================
  # Backend Linting
  # ==========================================
  backend-lint:
    name: Backend Lint (Go)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          working-directory: ./backend
          args: --timeout=5m

  # ==========================================
  # Summary
  # ==========================================
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, backend-lint]
    if: always()
    
    steps:
      - name: Generate summary
        run: |
          echo "## ✅ CI Checks Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Results" >> $GITHUB_STEP_SUMMARY
          echo "- Backend Tests: ${{ needs.backend-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend Tests: ${{ needs.frontend-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Backend Lint: ${{ needs.backend-lint.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🐳 Docker Images" >> $GITHUB_STEP_SUMMARY
          echo "Docker images are built locally and published manually." >> $GITHUB_STEP_SUMMARY
          echo "Run: \`./scripts/publish-docker-images.sh <version>\`" >> $GITHUB_STEP_SUMMARY

