name: ClassSphere - Coverage 100% Pipeline

on:
  push:
    branches: [ main, develop, fase1-completada ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-coverage:
    name: Backend Coverage 100%
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Install dependencies
      run: |
        cd backend
        go mod tidy
        
    - name: Run tests with coverage
      run: |
        cd backend
        go test -v -cover ./... -coverprofile=coverage.out
        
    - name: Generate coverage report
      run: |
        cd backend
        go tool cover -html=coverage.out -o coverage.html
        
    - name: Check coverage threshold
      run: |
        cd backend
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Current coverage: $COVERAGE%"
        if (( $(echo "$COVERAGE < 100" | bc -l) )); then
          echo "❌ Coverage $COVERAGE% is below 100%"
          exit 1
        else
          echo "✅ Coverage $COVERAGE% meets requirement"
        fi
        
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: backend-coverage-report
        path: backend/coverage.html

  frontend-coverage:
    name: Frontend Coverage 100%
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/classsphere-frontend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd frontend/classsphere-frontend
        npm ci
        
    - name: Run tests with coverage
      run: |
        cd frontend/classsphere-frontend
        npm test -- --code-coverage --watch=false --browsers=ChromeHeadless
        
    - name: Check coverage threshold
      run: |
        cd frontend/classsphere-frontend
        # Extract coverage percentage from test output
        COVERAGE=$(npm test -- --code-coverage --watch=false 2>&1 | grep "Statements" | awk '{print $3}' | sed 's/%//')
        echo "Current coverage: $COVERAGE%"
        if [ "$COVERAGE" != "100" ]; then
          echo "❌ Coverage $COVERAGE% is below 100%"
          exit 1
        else
          echo "✅ Coverage $COVERAGE% meets requirement"
        fi
        
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: frontend-coverage-report
        path: frontend/classsphere-frontend/coverage/

  e2e-tests:
    name: E2E Tests 100%
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/classsphere-frontend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd frontend/classsphere-frontend
        npm ci
        
    - name: Install Playwright browsers
      run: |
        cd frontend/classsphere-frontend
        npx playwright install --with-deps
        
    - name: Start backend server
      run: |
        cd backend
        go run main.go &
        sleep 5
        
    - name: Run E2E tests
      run: |
        cd frontend/classsphere-frontend
        npx playwright test
        
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: frontend/classsphere-frontend/playwright-report/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  performance-test:
    name: Performance Test <2s
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install dependencies
      run: |
        cd backend
        go mod tidy
        cd ../frontend/classsphere-frontend
        npm ci
        
    - name: Start backend server
      run: |
        cd backend
        go run main.go &
        sleep 3
        
    - name: Start frontend server
      run: |
        cd frontend/classsphere-frontend
        npm start &
        sleep 10
        
    - name: Test backend performance
      run: |
        BACKEND_TIME=$(curl -s -w "%{time_total}" -o /dev/null http://localhost:8080/health)
        echo "Backend response time: ${BACKEND_TIME}s"
        if (( $(echo "$BACKEND_TIME > 2" | bc -l) )); then
          echo "❌ Backend response time $BACKEND_TIME exceeds 2s"
          exit 1
        else
          echo "✅ Backend response time $BACKEND_TIME is acceptable"
        fi
        
    - name: Test frontend performance
      run: |
        FRONTEND_TIME=$(curl -s -w "%{time_total}" -o /dev/null http://localhost:4200)
        echo "Frontend response time: ${FRONTEND_TIME}s"
        if (( $(echo "$FRONTEND_TIME > 2" | bc -l) )); then
          echo "❌ Frontend response time $FRONTEND_TIME exceeds 2s"
          exit 1
        else
          echo "✅ Frontend response time $FRONTEND_TIME is acceptable"
        fi

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [backend-coverage, frontend-coverage, e2e-tests, security-scan, performance-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Build backend
      run: |
        cd backend
        go build -o classsphere-backend main.go
        
    - name: Build frontend
      run: |
        cd frontend/classsphere-frontend
        npm run build
        
    - name: Create deployment artifact
      run: |
        mkdir -p deployment
        cp backend/classsphere-backend deployment/
        cp -r frontend/classsphere-frontend/dist deployment/frontend
        cp backend/env.example deployment/.env.example
        
    - name: Upload deployment artifact
      uses: actions/upload-artifact@v3
      with:
        name: classsphere-deployment
        path: deployment/
