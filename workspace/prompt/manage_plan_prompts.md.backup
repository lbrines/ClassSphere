---
title: "ClassSphere - Prompts de Gesti√≥n del Plan"
version: "1.0"
type: "prompt_collection"
date: "2025-10-05"
author: "Sistema de Gesti√≥n ClassSphere"
total_prompts: 20
---

# ClassSphere Plan Management Prompts

## üìã √çndice

### Gesti√≥n del Plan
1. [CREATE: Crear Nuevo Plan](#1-prompt-create-plan)
2. [UPDATE: Actualizar Plan](#2-prompt-update-plan)

### An√°lisis del Plan (/contracts/plan/)
3. [Trazabilidad del Plan (Alta)](#3-prompt-analyze-plan-traceability)
4. [Coherencia del Plan (Alta)](#4-prompt-analyze-plan-coherence)
5. [Dependencias del Plan (Alta)](#5-prompt-analyze-plan-dependencies)
6. [Patrones del Plan (Media)](#6-prompt-analyze-plan-patterns)
7. [Completitud del Plan (Media)](#7-prompt-analyze-plan-completeness)
8. [Complejidad del Plan (Baja)](#8-prompt-analyze-plan-complexity)
9. [Riesgos del Plan (Baja)](#9-prompt-analyze-plan-risks)
10. [Calidad del Plan (Baja)](#10-prompt-analyze-plan-quality)

### An√°lisis de Especificaciones (/contracts/principal/)
11. [Trazabilidad de Specs (Alta)](#11-prompt-analyze-specs-traceability)
12. [Coherencia de Specs (Alta)](#12-prompt-analyze-specs-coherence)
13. [Dependencias de Specs (Alta)](#13-prompt-analyze-specs-dependencies)
14. [Patrones de Specs (Media)](#14-prompt-analyze-specs-patterns)
15. [Completitud de Specs (Media)](#15-prompt-analyze-specs-completeness)
16. [Complejidad de Specs (Baja)](#16-prompt-analyze-specs-complexity)
17. [Riesgos de Specs (Baja)](#17-prompt-analyze-specs-risks)
18. [Calidad de Specs (Baja)](#18-prompt-analyze-specs-quality)

### An√°lisis Comparativo
19. [Comparar Plan vs Specs](#19-prompt-compare-plan-specs)
20. [Verificar Sincronizaci√≥n](#20-prompt-sync-check)

### An√°lisis de Cumplimiento
21. [Analizar Cumplimiento con Mejores Pr√°cticas](#21-prompt-analyze-best-practices-compliance)

### Gesti√≥n de Repositorio
22. [Limpiar Repositorio y Mantener Solo Contracts](#22-prompt-clean-repo-keep-contracts)

### An√°lisis Unificado
23. [An√°lisis Unificado de Plan y Especificaciones](#23-prompt-analyze-unified-plan-specs)

---

## üéØ Gu√≠a de Uso R√°pida

**Analizar solo el plan:**
‚Üí Usar prompts 3-10

**Analizar solo especificaciones:**
‚Üí Usar prompts 11-18

**Comparar plan con specs:**
‚Üí Usar prompts 19-20

**Crear plan nuevo:**
‚Üí Usar prompt 1

**Actualizar plan existente:**
‚Üí Usar prompt 2

**An√°lisis completo:**
‚Üí Usar prompts seg√∫n prioridad (Alta ‚Üí Media ‚Üí Baja)

**Verificar cumplimiento con mejores pr√°cticas:**
‚Üí Usar prompt 21

**Limpiar repositorio manteniendo solo contracts:**
‚Üí Usar prompt 22

**An√°lisis completo unificado (plan o especificaciones):**
‚Üí Usar prompt 23

---

# PROMPTS DE GESTI√ìN

## 1. PROMPT_CREATE_PLAN

```markdown
# PROMPT: Crear Nuevo Plan de Desarrollo ClassSphere

## OBJETIVO PRINCIPAL
Generar plan completo de desarrollo desde cero en `/workspace/plan/` siguiendo 100% las especificaciones de `@00_ClassSphere_index.md` y aplicando mejores pr√°cticas de `@SOFTWARE_PROJECT_BEST_PRACTICES.md`.

## CONTEXTO DE EJECUCI√ìN
- **Proyecto**: Repositorio vac√≠o o sin plan existente
- **Enfoque**: Desarrollo desde cero con TDD estricto
- **Destino**: Crear estructura en `/workspace/plan/`
- **Audiencia**: LLM que ejecutar√° el plan paso a paso

## PASO 1: LEER ESPECIFICACIONES

**Archivos a leer:**
```bash
# Especificaciones principales
cat workspace/contracts/00_ClassSphere_index.md
cat workspace/contracts/04_ClassSphere_objetivos.md
cat workspace/contracts/05_ClassSphere_arquitectura.md
cat workspace/contracts/06_ClassSphere_funcionalidades.md
cat workspace/contracts/09_ClassSphere_testing.md
cat workspace/contracts/10_ClassSphere_plan_implementacion.md

# Mejores pr√°cticas (si existen en workspace/extra/)
cat workspace/extra/SOFTWARE_PROJECT_BEST_PRACTICES.md
```

## PASO 2: EXTRAER REQUISITOS CLAVE

**Informaci√≥n cr√≠tica a extraer:**
- Stack tecnol√≥gico (versiones exactas)
- Metodolog√≠a TDD
- Estructura de fases
- Cobertura de testing requerida
- Timeouts de testing
- Principios de seguridad
- Context management requirements

## PASO 3: CREAR ARCHIVOS DEL PLAN

**Archivos a crear (usar write_to_file tool):**

### 3.1 Archivo Principal
- **Archivo**: `workspace/plan/01_plan_index.md`
- **Prioridad**: CRITICAL (2000 tokens max)
- **Estructura**: INICIO-MEDIO-FINAL
- **Contenido**:
  - Objetivos cr√≠ticos y dependencias bloqueantes
  - Fases de desarrollo (resumen)
  - Seguridad y verificaci√≥n
  - Estrategia de testing
  - Gesti√≥n de contexto
  - M√©tricas de evaluaci√≥n
  - Checklist final y pr√≥ximos pasos

### 3.2 Fase 1: Fundaciones
- **Archivo**: `workspace/plan/02_plan_fase1_fundaciones.md`
- **Prioridad**: CRITICAL (2000 tokens max)
- **Duraci√≥n**: 12 d√≠as
- **Contenido**:
  - Backend: Go 1.21+ + Echo v4 + JWT + OAuth 2.0 Google
  - Frontend: Angular 19 + esbuild + TailwindCSS 3.x
  - Testing: testify (Go) + Jasmine + Karma (Angular) + Playwright (E2E)
  - Puertos: 8080 (backend), 4200 (frontend)
  - Arquitectura: Hexagonal (ports & adapters) en backend
  - Instrucciones d√≠a por d√≠a con comandos espec√≠ficos

### 3.3 Fase 2: Google Integration
- **Archivo**: `workspace/plan/03_plan_fase2_google_integration.md`
- **Prioridad**: HIGH (1500 tokens max)
- **Duraci√≥n**: 10 d√≠as
- **Contenido**:
  - Google Classroom API con mocks
  - Modo dual (Google/Mock)
  - Dashboards por rol (4 tipos)
  - Gr√°ficos interactivos

### 3.4 Fase 3: Visualizaci√≥n
- **Archivo**: `workspace/plan/04_plan_fase3_visualizacion.md`
- **Prioridad**: MEDIUM (1000 tokens max)
- **Duraci√≥n**: 10 d√≠as
- **Contenido**:
  - B√∫squeda avanzada multi-entidad
  - Notificaciones WebSocket real-time
  - Gr√°ficos interactivos avanzados

### 3.5 Fase 4: Integraci√≥n
- **Archivo**: `workspace/plan/05_plan_fase4_integracion.md`
- **Prioridad**: LOW (800 tokens max)
- **Duraci√≥n**: 13 d√≠as
- **Contenido**:
  - Sincronizaci√≥n bidireccional Google
  - Accesibilidad WCAG 2.2 AA completa
  - CI/CD pipeline completo

### 3.6 Estrategia de Testing
- **Archivo**: `workspace/plan/06_plan_testing_strategy.md`
- **Contenido**:
  - Stack: testify (Go) + Jasmine + Karma (Angular) + Playwright (E2E)
  - Cobertura requerida: ‚â•80% global, ‚â•90% m√≥dulos cr√≠ticos
  - Templates de tests
  - Comandos de verificaci√≥n

### 3.7 Protocolos de Seguridad
- **Archivo**: `workspace/plan/07_plan_security_protocols.md`
- **Contenido**:
  - Principio de cero confianza
  - SAST, SCA, Secrets detection con Trivy
  - Prompt engineering de seguridad
  - Pipeline de seguridad CI/CD

### 3.8 Gesti√≥n de Contexto
- **Archivo**: `workspace/plan/08_plan_context_management.md`
- **Contenido**:
  - Chunking por prioridad (CRITICAL‚ÜíLOW)
  - Estructura anti lost-in-the-middle
  - Logs estructurados con context_id
  - Context recovery mechanisms

### 3.9 M√©tricas de Evaluaci√≥n
- **Archivo**: `workspace/plan/09_plan_evaluation_metrics.md`
- **Contenido**:
  - Precisi√≥n ‚â•95%
  - Completitud 100%
  - Coherencia ‚â•85%
  - M√©tricas t√©cnicas (performance, cobertura, vulnerabilidades)

### 3.10 README
- **Archivo**: `workspace/plan/README.md`
- **Contenido**:
  - Descripci√≥n del plan
  - Gu√≠a de inicio r√°pido para LLMs
  - Stack tecnol√≥gico (Go + Angular)
  - Comandos de validaci√≥n

## PASO 4: VALIDAR PLAN CREADO

**Comandos de validaci√≥n:**
```bash
# Verificar archivos creados
ls -la workspace/plan/*.md | wc -l
# Debe retornar: 10

# Verificar estructura anti lost-in-the-middle
for file in workspace/plan/0[2-5]*.md; do
  echo "=== $file ==="
  grep -c "## üéØ INICIO:" "$file"
  grep -c "## üìÖ MEDIO:" "$file"
  grep -c "## ‚úÖ FINAL:" "$file"
done

# Verificar coherencia de stack Go + Angular
grep -r "Go 1.21" workspace/plan/ | wc -l
grep -r "Angular 19" workspace/plan/ | wc -l
grep -r "Echo v4" workspace/plan/ | wc -l
grep -r "testify" workspace/plan/ | wc -l

# Verificar puertos defaults
grep -r "8080" workspace/plan/ | wc -l  # Backend
grep -r "4200" workspace/plan/ | wc -l  # Frontend

# Verificar que NO mencione tecnolog√≠as obsoletas
grep -r "FastAPI\|Next.js\|React\|Jest\|Vitest" workspace/plan/
# No debe retornar nada
```

## OUTPUT ESPERADO: RESUMEN EJECUTIVO

Generar resumen ejecutivo con este formato:

# Resumen Ejecutivo: Creaci√≥n del Plan ClassSphere

## üéØ Objetivo Cumplido
Plan completo de desarrollo generado en `/workspace/plan/` con 10 archivos.

## üìä Archivos Creados
- ‚úÖ 01_plan_index.md (5.2 KB, CRITICAL)
- ‚úÖ 02_plan_fase1_fundaciones.md (7.9 KB, CRITICAL)
- ‚úÖ 03_plan_fase2_google_integration.md (9.4 KB, HIGH)
- ‚úÖ 04_plan_fase3_visualizacion.md (11 KB, MEDIUM)
- ‚úÖ 05_plan_fase4_integracion.md (12 KB, LOW)
- ‚úÖ 06_plan_testing_strategy.md (13 KB)
- ‚úÖ 07_plan_security_protocols.md (13 KB)
- ‚úÖ 08_plan_context_management.md (12 KB)
- ‚úÖ 09_plan_evaluation_metrics.md (10 KB)
- ‚úÖ README.md (7.7 KB)

## üìà Validaciones
- ‚úÖ Estructura anti lost-in-the-middle: 100% (4/4 archivos de fase)
- ‚úÖ Coherencia Go 1.21+: [X] menciones
- ‚úÖ Coherencia Angular 19: [X] menciones
- ‚úÖ Coherencia Echo v4: [X] menciones
- ‚úÖ Coherencia testify: [X] menciones
- ‚úÖ Puertos defaults (8080/4200): Verificados
- ‚úÖ NO menciona tecnolog√≠as obsoletas: Correcto
- ‚úÖ Chunking por prioridad: Aplicado

## ‚úÖ Caracter√≠sticas del Plan
- Stack: Go 1.21+ (backend) + Angular 19 (frontend)
- Arquitectura: Hexagonal (ports & adapters) en backend
- Testing: testify + Jasmine + Karma + Playwright
- Puertos: 8080 (backend), 4200 (frontend) - defaults
- Completamente ejecutable desde repositorio vac√≠o
- Instrucciones paso a paso sin ambig√ºedades
- TDD-RunFix+ estricto desde el inicio
- Seguridad de cero confianza
- Context management optimizado para LLMs
- M√©tricas objetivas de √©xito

## üìç Pr√≥ximos Pasos
1. Revisar plan generado en `/workspace/plan/`
2. Comenzar con Fase 1: `cat workspace/plan/02_plan_fase1_fundaciones.md`
3. Ejecutar validaciones peri√≥dicas
4. Mantener sincronizado con especificaciones en `/workspace/contracts/`

## üìà Estado General
‚úÖ PLAN CREADO EXITOSAMENTE - Listo para ejecuci√≥n
```

---

## 2. PROMPT_UPDATE_PLAN

```markdown
# PROMPT: Actualizar Plan de Desarrollo Existente

## OBJETIVO PRINCIPAL
Actualizar el plan en `/workspace/plan/` basado en cambios detectados en especificaciones (`/workspace/contracts/`) usando Git como herramienta de detecci√≥n.

## CONTEXTO
- **Plan actual**: `/workspace/plan/` (10 archivos)
- **Especificaciones**: `/workspace/contracts/`
- **M√©todo**: Git diff para detectar cambios
- **Acci√≥n**: Actualizar solo archivos afectados (NO crear nuevos)

## PASO 1: DETECTAR CAMBIOS CON GIT

**Comandos a ejecutar:**
```bash
# Ver cambios en especificaciones desde √∫ltimo commit
git diff HEAD workspace/contracts/

# Ver archivos modificados
git diff --name-only HEAD workspace/contracts/

# Ver cambios con contexto
git diff HEAD workspace/contracts/ --unified=5

# Ver historial reciente
git log --oneline -10 workspace/contracts/

# Ver cambios espec√≠ficos en un archivo
git diff HEAD workspace/contracts/05_ClassSphere_arquitectura.md
```

## PASO 2: ANALIZAR IMPACTO

**Mapeo de cambios ‚Üí archivos del plan:**

```yaml
Cambios en:
  00_ClassSphere_index.md:
    ‚Üí Afecta: 01_plan_index.md

  04_ClassSphere_objetivos.md:
    ‚Üí Afecta: 01_plan_index.md, archivos de fase correspondientes

  05_ClassSphere_arquitectura.md:
    ‚Üí Afecta: 01_plan_index.md, todas las fases
    ‚Üí Especialmente: Stack tecnol√≥gico, estructura directorios

  06_ClassSphere_funcionalidades.md:
    ‚Üí Afecta: Fase correspondiente a cada funcionalidad
    - Autenticaci√≥n ‚Üí 02_plan_fase1_fundaciones.md
    - Google ‚Üí 03_plan_fase2_google_integration.md
    - Visualizaci√≥n ‚Üí 04_plan_fase3_visualizacion.md
    - Accesibilidad ‚Üí 05_plan_fase4_integracion.md

  09_ClassSphere_testing.md:
    ‚Üí Afecta: 06_plan_testing_strategy.md, 09_plan_evaluation_metrics.md

  10_ClassSphere_plan_implementacion.md:
    ‚Üí Afecta: Todas las fases

  11_ClassSphere_deployment.md:
    ‚Üí Afecta: 05_plan_fase4_integracion.md
```

## PASO 3: CLASIFICAR PRIORIDAD DE CAMBIOS

**Comandos para an√°lisis:**
```bash
# Identificar tipo de cambio
git diff HEAD workspace/contracts/ | grep "^+" | head -20
git diff HEAD workspace/contracts/ | grep "^-" | head -20

# Buscar cambios cr√≠ticos (Go + Angular stack)
git diff HEAD workspace/contracts/ | grep -i "version\|stack\|tdd\|security\|go\|angular"
```

**Clasificaci√≥n:**
- **CRITICAL**: Stack tecnol√≥gico (Go/Angular), metodolog√≠a TDD-RunFix+, seguridad, puertos
- **HIGH**: Nuevas funcionalidades, cambios en endpoints, arquitectura hexagonal
- **MEDIUM**: Cambios en documentaci√≥n, refinamientos
- **LOW**: Typos, formateo, enlaces

## PASO 4: ACTUALIZAR ARCHIVOS DEL PLAN

**Para cada cambio identificado:**

1. **Localizar secci√≥n en plan:**
```bash
grep -n "t√©rmino_buscado" workspace/plan/*.md
```

2. **Usar Edit tool para actualizar:**
   - Preservar estructura INICIO-MEDIO-FINAL
   - Mantener chunking por prioridad
   - Actualizar comandos de verificaci√≥n si aplica
   - Actualizar criterios de aceptaci√≥n si aplica
   - Verificar stack Go + Angular (NO FastAPI/Next.js/React)

3. **Validar coherencia:**
```bash
# Verificar consistencia de t√©rminos (Go + Angular)
grep -c "Go 1.21" workspace/plan/*.md
grep -c "Angular 19" workspace/plan/*.md
grep -c "Echo v4" workspace/plan/*.md
grep "Go" workspace/plan/*.md | grep -v "1.21"
```

## PASO 5: VALIDAR ACTUALIZACI√ìN

**Comandos de validaci√≥n:**
```bash
# 1. Coherencia sem√°ntica (Go + Angular stack)
grep -r "Go 1.21" workspace/plan/ | wc -l
grep -r "Angular 19" workspace/plan/ | wc -l
grep -r "Echo v4" workspace/plan/ | wc -l
grep -r "testify" workspace/plan/ | wc -l

# Verificar que NO mencione tecnolog√≠as obsoletas
grep -r "FastAPI\|Next.js\|React\|Jest\|Vitest" workspace/plan/
# No debe retornar nada

# 2. Estructura anti lost-in-the-middle
for file in workspace/plan/0[2-5]*.md; do
  grep -c "## üéØ INICIO:" "$file"
  grep -c "## üìÖ MEDIO:" "$file"
  grep -c "## ‚úÖ FINAL:" "$file"
done

# 3. Puertos defaults
grep -r "8080" workspace/plan/ | wc -l  # Backend
grep -r "4200" workspace/plan/ | wc -l  # Frontend

# 4. Referencias cruzadas
grep -r "\[.*\](.*\.md)" workspace/plan/ | wc -l

# 5. Completitud
ls workspace/plan/*.md | wc -l  # Debe ser 10
```

## PASO 6: DOCUMENTAR CAMBIOS

**Crear commit:**
```bash
# Ver cambios realizados
git diff workspace/plan/

# Agregar archivos modificados
git add workspace/plan/

# Commit descriptivo
git commit -m "[plan] Update based on spec changes

Changes:
- Updated [componente] in [archivo]
- Modified [secci√≥n] to reflect [cambio]
- Synchronized with specs version [versi√≥n]

Stack: Go 1.21+ (backend) + Angular 19 (frontend)
Triggered by: git diff HEAD workspace/contracts/"
```

## OUTPUT ESPERADO: RESUMEN EJECUTIVO

# Resumen Ejecutivo: Actualizaci√≥n del Plan

## üéØ Objetivo Cumplido
Plan actualizado basado en cambios detectados en especificaciones.

## üìä Cambios Detectados
**Archivos de specs modificados:**
- 05_ClassSphere_arquitectura.md (X l√≠neas cambiadas)
- 09_ClassSphere_testing.md (X l√≠neas cambiadas)

**Tipo de cambios:**
- Actualizaci√≥n de stack: [cambio detectado]
- Nuevo requisito: [especificar]
- Refinamiento: [detallar]

## üîÑ Archivos del Plan Actualizados
- ‚úÖ 01_plan_index.md (actualizado stack tecnol√≥gico Go + Angular)
- ‚úÖ 02_plan_fase1_fundaciones.md (actualizado backend Go/frontend Angular)
- ‚úÖ 06_plan_testing_strategy.md (actualizado testify + Jasmine)
- ‚úÖ 09_plan_evaluation_metrics.md (actualizadas m√©tricas)

## ‚úÖ Validaciones Post-Actualizaci√≥n
- ‚úÖ Coherencia Go 1.21+: [X] menciones
- ‚úÖ Coherencia Angular 19: [X] menciones
- ‚úÖ Coherencia Echo v4: [X] menciones
- ‚úÖ Coherencia testify: [X] menciones
- ‚úÖ Puertos defaults (8080/4200): Verificados
- ‚úÖ NO menciona tecnolog√≠as obsoletas: Correcto
- ‚úÖ Estructura anti lost-in-the-middle: Preservada
- ‚úÖ Referencias cruzadas: Sin enlaces rotos
- ‚úÖ Completitud: 10 archivos intactos

## üìù Commit Creado
```
[plan] Update based on spec changes

Changes:
- Updated [componente] in [archivo]
- Modified [secci√≥n] to reflect [cambio]
- Synchronized with specs version [versi√≥n]

Stack: Go 1.21+ (backend) + Angular 19 (frontend)
Triggered by: git diff HEAD workspace/contracts/
```

## üìà Estado General
‚úÖ PLAN ACTUALIZADO EXITOSAMENTE - Sincronizado con specs en /workspace/contracts/
```

---

# AN√ÅLISIS DEL PLAN

## 3. PROMPT_ANALYZE_PLAN_TRACEABILITY

```markdown
# PROMPT: An√°lisis de Trazabilidad del Plan

## OBJETIVO
Verificar que cada requisito de las especificaciones est√© cubierto en el plan de desarrollo.

## SCOPE
- **Directorio**: `/contracts/plan/`
- **Prioridad**: ALTA
- **Criterio de √©xito**: ‚â•95% de cobertura

## PASO 1: EXTRAER REQUISITOS DE ESPECIFICACIONES

**Archivos fuente:**
```bash
# Objetivos
grep -E "^###|^-" contracts/principal/04_ClassSphere_objetivos.md

# Funcionalidades
grep -E "^##|^###" contracts/principal/06_ClassSphere_funcionalidades.md

# API Endpoints
grep -E "^POST|^GET|^PUT|^DELETE" contracts/principal/07_ClassSphere_api_endpoints.md
```

**Requisitos clave a verificar:**
1. FastAPI 0.104.1
2. Pydantic v2
3. Next.js 15
4. React 19
5. JWT Authentication
6. OAuth 2.0 Google
7. Sistema de roles
8. Google Classroom API
9. Dashboards por rol (4 tipos)
10. ApexCharts 5.3.5
11. B√∫squeda avanzada
12. Notificaciones WebSocket
13. Accesibilidad WCAG 2.2 AA
14. CI/CD Pipeline
15. Testing ‚â•80% coverage

## PASO 2: BUSCAR COBERTURA EN PLAN

**Comandos:**
```bash
# Verificar cada requisito
grep -r "FastAPI 0.104.1" contracts/plan/
grep -r "Pydantic v2" contracts/plan/
grep -r "Next.js 15" contracts/plan/
grep -r "React 19" contracts/plan/
grep -r "JWT" contracts/plan/
grep -r "OAuth 2.0" contracts/plan/
grep -r "Google Classroom" contracts/plan/
grep -r "ApexCharts 5.3.5" contracts/plan/
grep -r "WebSocket" contracts/plan/
grep -r "WCAG 2.2 AA" contracts/plan/

# Contar menciones
for req in "FastAPI" "Next.js" "React" "JWT" "OAuth" "WebSocket"; do
  echo "$req: $(grep -rc "$req" contracts/plan/ | awk -F: '{sum+=$2} END {print sum}')"
done
```

## PASO 3: IDENTIFICAR GAPS

**An√°lisis:**
- Requisitos sin cobertura
- Requisitos parcialmente cubiertos
- Requisitos obsoletos en plan

## OUTPUT ESPERADO: RESUMEN EJECUTIVO

# Resumen Ejecutivo: Trazabilidad del Plan

## üéØ Objetivo Cumplido
An√°lisis de cobertura de requisitos en el plan de desarrollo.

## üìä Resultados Principales
**Requisitos analizados:** 15
**Requisitos cubiertos:** 15
**Cobertura:** 100%

### Desglose por Requisito
- ‚úÖ FastAPI 0.104.1: 12 menciones en 5 archivos
- ‚úÖ Pydantic v2: 8 menciones en 3 archivos
- ‚úÖ Next.js 15: 10 menciones en 4 archivos
- ‚úÖ React 19: 9 menciones en 4 archivos
- ‚úÖ JWT Authentication: 15 menciones en 3 archivos
- ‚úÖ OAuth 2.0 Google: 18 menciones en 3 archivos
- ‚úÖ Sistema de roles: 7 menciones en 2 archivos
- ‚úÖ Google Classroom API: 25 menciones en 4 archivos
- ‚úÖ Dashboards por rol: 12 menciones en 2 archivos
- ‚úÖ ApexCharts 5.3.5: 6 menciones en 2 archivos
- ‚úÖ B√∫squeda avanzada: 8 menciones en 2 archivos
- ‚úÖ Notificaciones WebSocket: 10 menciones en 2 archivos
- ‚úÖ WCAG 2.2 AA: 5 menciones en 1 archivo
- ‚úÖ CI/CD Pipeline: 9 menciones en 2 archivos
- ‚úÖ Testing ‚â•80%: 15 menciones en 4 archivos

## ‚ö†Ô∏è Hallazgos Cr√≠ticos
Ninguno - Todos los requisitos est√°n cubiertos.

## ‚úÖ Recomendaciones
1. Mantener sincronizaci√≥n con especificaciones
2. Ejecutar este an√°lisis despu√©s de cada actualizaci√≥n de specs
3. Agregar requisitos nuevos inmediatamente al plan

## üìà Estado General
‚úÖ PASS (100% cobertura, objetivo: ‚â•95%)
```

---

## 4. PROMPT_ANALYZE_PLAN_COHERENCE

```markdown
# PROMPT: An√°lisis de Coherencia del Plan

## OBJETIVO
Validar consistencia de t√©rminos t√©cnicos en todo el plan de desarrollo.

## SCOPE
- **Directorio**: `/contracts/plan/`
- **Prioridad**: ALTA
- **Criterio de √©xito**: ‚â•85% de coherencia

## T√âRMINOS A VALIDAR

**Versiones de tecnolog√≠as:**
- FastAPI: debe ser "0.104.1" siempre
- Next.js: debe ser "15" siempre
- React: debe ser "19" siempre
- Pydantic: debe ser "v2" siempre
- ApexCharts: debe ser "5.3.5" siempre
- TypeScript: debe ser "5.1.6" siempre
- Tailwind CSS: debe ser "3.3.3" siempre

**Configuraciones:**
- Puerto: debe ser "8000" siempre
- Cobertura: debe ser "‚â•80%" siempre
- Testing: debe ser "Vitest + Playwright" (NO Jest)

**Metodolog√≠a:**
- TDD: debe ser "estricto" o "Red-Green-Refactor"
- Seguridad: debe ser "cero confianza"
- Accesibilidad: debe ser "WCAG 2.2 AA"

## COMANDOS DE VERIFICACI√ìN

```bash
# Verificar versiones
grep -r "FastAPI" contracts/plan/ | grep -v "0.104.1"
grep -r "Next\.js" contracts/plan/ | grep -v "15"
grep -r "React" contracts/plan/ | grep -v "19"
grep -r "Pydantic" contracts/plan/ | grep -v "v2"
grep -r "ApexCharts" contracts/plan/ | grep -v "5.3.5"

# Verificar configuraciones
grep -r "puerto" contracts/plan/ | grep -v "8000"
grep -r "coverage\|cobertura" contracts/plan/ | grep -v "80%"

# Verificar que NO mencione Jest
grep -r "Jest" contracts/plan/

# Contar menciones correctas
echo "FastAPI 0.104.1: $(grep -rc "FastAPI 0.104.1" contracts/plan/ | awk -F: '{sum+=$2} END {print sum}')"
echo "Next.js 15: $(grep -rc "Next.js 15" contracts/plan/ | awk -F: '{sum+=$2} END {print sum}')"
echo "React 19: $(grep -rc "React 19" contracts/plan/ | awk -F: '{sum+=$2} END {print sum}')"
```

## OUTPUT ESPERADO: RESUMEN EJECUTIVO

# Resumen Ejecutivo: Coherencia del Plan

## üéØ Objetivo Cumplido
Validaci√≥n de consistencia de t√©rminos t√©cnicos en el plan.

## üìä Resultados Principales

### Versiones de Tecnolog√≠as
- ‚úÖ FastAPI 0.104.1: 100% consistente (12/12 menciones)
- ‚úÖ Next.js 15: 100% consistente (10/10 menciones)
- ‚úÖ React 19: 100% consistente (9/9 menciones)
- ‚úÖ Pydantic v2: 100% consistente (8/8 menciones)
- ‚úÖ ApexCharts 5.3.5: 100% consistente (6/6 menciones)

### Configuraciones
- ‚úÖ Puerto 8000: 100% consistente (8/8 menciones)
- ‚úÖ Cobertura ‚â•80%: 100% consistente (15/15 menciones)
- ‚úÖ Testing Vitest+Playwright: 100% consistente (NO Jest encontrado)

### Metodolog√≠a
- ‚úÖ TDD estricto: Mencionado consistentemente
- ‚úÖ Cero confianza: Mencionado consistentemente
- ‚úÖ WCAG 2.2 AA: Mencionado consistentemente

## ‚ö†Ô∏è Hallazgos Cr√≠ticos
Ninguno - Todos los t√©rminos son consistentes.

## ‚úÖ Recomendaciones
1. Mantener esta coherencia en futuras actualizaciones
2. Usar Edit tool con replace_all para cambios globales
3. Ejecutar este an√°lisis despu√©s de cada actualizaci√≥n

## üìà Estado General
‚úÖ PASS (100% coherencia, objetivo: ‚â•85%)
```

---

## 5. PROMPT_ANALYZE_PLAN_DEPENDENCIES

```markdown
# PROMPT: An√°lisis de Dependencias del Plan

## OBJETIVO
Verificar que dependencias cr√≠ticas entre fases est√©n documentadas y sean correctas.

## SCOPE
- **Directorio**: `/contracts/plan/`
- **Prioridad**: ALTA
- **Criterio de √©xito**: 100% de dependencias documentadas

## DEPENDENCIAS A VALIDAR

**Fase 2 (Google Integration) requiere:**
- Fase 1 completada (100%)
- OAuth 2.0 configurado
- Sistema de roles funcionando
- JWT tokens funcionando

**Fase 3 (Visualizaci√≥n) requiere:**
- Fase 2 completada (100%)
- WebSocket support configurado
- ApexCharts integrado
- Dashboards base funcionando

**Fase 4 (Integraci√≥n) requiere:**
- Fase 3 completada (100%)
- Tests E2E funcionando
- Google API mocks validados
- Performance < 2s validado

## COMANDOS DE VERIFICACI√ìN

```bash
# Buscar secci√≥n de dependencias en cada fase
grep -A 10 "Dependencias Bloqueantes" contracts/plan/03_plan_fase2*.md
grep -A 10 "Dependencias Bloqueantes" contracts/plan/04_plan_fase3*.md
grep -A 10 "Dependencias Bloqueantes" contracts/plan/05_plan_fase4*.md

# Verificar menciones de dependencias
grep -r "Fase 1 completada" contracts/plan/03_plan_fase2*.md
grep -r "Fase 2 completada" contracts/plan/04_plan_fase3*.md
grep -r "Fase 3 completada" contracts/plan/05_plan_fase4*.md

# Verificar dependencias t√©cnicas
grep -r "OAuth 2.0" contracts/plan/03_plan_fase2*.md
grep -r "WebSocket" contracts/plan/04_plan_fase3*.md
grep -r "Tests E2E" contracts/plan/05_plan_fase4*.md
```

## OUTPUT ESPERADO: RESUMEN EJECUTIVO

# Resumen Ejecutivo: Dependencias del Plan

## üéØ Objetivo Cumplido
Validaci√≥n de dependencias entre fases del plan.

## üìä Resultados Principales

### Fase 2: Google Integration
**Dependencias documentadas:**
- ‚úÖ Fase 1 completada (100%): Documentado
- ‚úÖ OAuth 2.0 configurado: Documentado
- ‚úÖ Sistema de roles funcionando: Documentado
- ‚úÖ JWT tokens funcionando: Documentado

**Ubicaci√≥n:** `03_plan_fase2_google_integration.md` l√≠neas 15-22

### Fase 3: Visualizaci√≥n Avanzada
**Dependencias documentadas:**
- ‚úÖ Fase 2 completada (100%): Documentado
- ‚úÖ WebSocket support configurado: Documentado
- ‚úÖ ApexCharts integrado: Documentado
- ‚úÖ Dashboards base funcionando: Documentado

**Ubicaci√≥n:** `04_plan_fase3_visualizacion.md` l√≠neas 12-18

### Fase 4: Integraci√≥n Completa
**Dependencias documentadas:**
- ‚úÖ Fase 3 completada (100%): Documentado
- ‚úÖ Tests E2E funcionando: Documentado
- ‚úÖ Google API mocks validados: Documentado
- ‚úÖ Performance < 2s validado: Documentado

**Ubicaci√≥n:** `05_plan_fase4_integracion.md` l√≠neas 14-20

## ‚ö†Ô∏è Hallazgos Cr√≠ticos
Ninguno - Todas las dependencias est√°n documentadas.

## ‚úÖ Recomendaciones
1. Verificar cumplimiento de dependencias antes de iniciar cada fase
2. Agregar comandos de verificaci√≥n de dependencias
3. Documentar dependencias nuevas inmediatamente

## üìà Estado General
‚úÖ PASS (100% dependencias documentadas)
```

---

## 6. PROMPT_ANALYZE_PLAN_PATTERNS

```markdown
# PROMPT: An√°lisis de Patrones del Plan

## OBJETIVO
Verificar consistencia de patrones arquitect√≥nicos y metodol√≥gicos en el plan.

## SCOPE
- **Directorio**: `/contracts/plan/`
- **Prioridad**: MEDIA
- **Criterio de √©xito**: ‚â•80% de consistencia

## PATRONES A VALIDAR

**1. TDD Estricto (Red-Green-Refactor)**
- Debe mencionarse en todas las fases
- Debe incluir ejemplos de ciclo TDD
- Tests antes de implementaci√≥n

**2. Context-Aware Services**
- Chunking por prioridad (CRITICAL‚ÜíLOW)
- L√≠mites de tokens especificados
- Context ID √∫nico

**3. Anti Lost-in-the-Middle**
- Estructura INICIO-MEDIO-FINAL
- Informaci√≥n cr√≠tica en INICIO y FINAL
- Detalle en MEDIO

**4. Cero Confianza**
- Verificaci√≥n obligatoria
- Escaneo autom√°tico (SAST, SCA)
- Prompt engineering de seguridad

**5. Logs Estructurados**
- Formato JSON
- Campos obligatorios
- Ubicaci√≥n en /tmp/

## COMANDOS DE VERIFICACI√ìN

```bash
# TDD
grep -c "Red-Green-Refactor\|TDD" contracts/plan/*.md

# Context-Aware
grep -c "Context-Aware\|chunking\|prioridad" contracts/plan/*.md

# Anti Lost-in-the-Middle
for file in contracts/plan/0[2-5]*.md; do
  echo "$file:"
  grep -c "## üéØ INICIO:" "$file"
  grep -c "## üìÖ MEDIO:" "$file"
  grep -c "## ‚úÖ FINAL:" "$file"
done

# Cero Confianza
grep -c "cero confianza\|zero trust" contracts/plan/*.md

# Logs Estructurados
grep -c "JSON\|/tmp/classsphere" contracts/plan/*.md
```

## OUTPUT ESPERADO: RESUMEN EJECUTIVO

# Resumen Ejecutivo: Patrones del Plan

## üéØ Objetivo Cumplido
Validaci√≥n de consistencia de patrones arquitect√≥nicos.

## üìä Resultados Principales

### TDD Estricto
- **Menciones totales:** 25
- **Archivos con patr√≥n:** 8/10
- **Consistencia:** 95%
- ‚úÖ Presente en todas las fases

### Context-Aware Services
- **Menciones totales:** 18
- **Archivos con patr√≥n:** 6/10
- **Consistencia:** 85%
- ‚úÖ Chunking por prioridad aplicado

### Anti Lost-in-the-Middle
- **Archivos de fase con estructura:** 4/4
- **Consistencia:** 100%
- ‚úÖ Estructura INICIO-MEDIO-FINAL completa

### Cero Confianza
- **Menciones totales:** 12
- **Archivos con patr√≥n:** 4/10
- **Consistencia:** 90%
- ‚úÖ Protocolos de seguridad documentados

### Logs Estructurados
- **Menciones totales:** 15
- **Archivos con patr√≥n:** 5/10
- **Consistencia:** 88%
- ‚úÖ Formato JSON especificado

## ‚ö†Ô∏è Hallazgos Cr√≠ticos
Ninguno - Todos los patrones est√°n presentes y consistentes.

## ‚úÖ Recomendaciones
1. Mantener aplicaci√≥n de patrones en actualizaciones
2. Agregar ejemplos de patrones en nuevas secciones
3. Documentar nuevos patrones si se introducen

## üìà Estado General
‚úÖ PASS (91% consistencia promedio, objetivo: ‚â•80%)
```

---

## 7. PROMPT_ANALYZE_PLAN_COMPLETENESS

```markdown
# PROMPT: An√°lisis de Completitud del Plan

## OBJETIVO
Validar que todas las funcionalidades de las especificaciones est√©n cubiertas en el plan.

## SCOPE
- **Directorio**: `/contracts/plan/`
- **Prioridad**: MEDIA
- **Criterio de √©xito**: ‚â•95% de cobertura funcional

## FUNCIONALIDADES A VERIFICAR

**Del archivo 06_ClassSphere_funcionalidades.md:**

1. Autenticaci√≥n y Autorizaci√≥n
   - JWT Authentication
   - OAuth 2.0 Google
   - Sistema de roles
   - Session management

2. Google Classroom Integration
   - Modo dual (Google/Mock)
   - API Integration completa
   - Sincronizaci√≥n bidireccional
   - Conflict resolution

3. Dashboards por Rol
   - Admin Dashboard
   - Coordinator Dashboard
   - Teacher Dashboard
   - Student Dashboard

4. Visualizaciones Avanzadas
   - ApexCharts interactivos
   - D3.js integration
   - Real-time updates
   - Export features

5. Sistema de B√∫squeda
   - Multi-entity search
   - Contextual filters
   - Real-time results
   - Saved searches

6. Notificaciones
   - WebSocket real-time
   - Multi-channel
   - Smart alerts
   - Preferences

7. M√©tricas y Analytics
   - KPIs educativos
   - Predictive analytics
   - Real-time metrics
   - Custom metrics

8. Accesibilidad
   - WCAG 2.2 AA
   - Keyboard navigation
   - Screen reader
   - High contrast

9. Testing
   - Unit tests ‚â•80%
   - Integration tests
   - E2E tests
   - Performance tests

10. CI/CD Pipeline
    - GitHub Actions
    - Quality gates
    - Docker
    - Monitoring

## COMANDOS DE VERIFICACI√ìN

```bash
# Verificar cada funcionalidad
for func in "JWT" "OAuth" "Dashboard" "ApexCharts" "WebSocket" "WCAG" "CI/CD"; do
  echo "$func: $(grep -rc "$func" contracts/plan/ | awk -F: '{sum+=$2} END {print sum}') menciones"
done

# Verificar dashboards por rol
grep -r "AdminDashboard\|CoordinatorDashboard\|TeacherDashboard\|StudentDashboard" contracts/plan/

# Verificar testing
grep -r "Unit.*test\|Integration.*test\|E2E.*test" contracts/plan/

# Contar funcionalidades cubiertas
grep -E "^###|^##" contracts/plan/0[2-5]*.md | wc -l
```

## OUTPUT ESPERADO: RESUMEN EJECUTIVO

# Resumen Ejecutivo: Completitud del Plan

## üéØ Objetivo Cumplido
Validaci√≥n de cobertura funcional del plan.

## üìä Resultados Principales

**Funcionalidades totales:** 10
**Funcionalidades cubiertas:** 10
**Cobertura:** 100%

### Desglose por Funcionalidad

1. ‚úÖ **Autenticaci√≥n y Autorizaci√≥n**
   - JWT: 15 menciones
   - OAuth 2.0: 18 menciones
   - Roles: 7 menciones
   - Ubicaci√≥n: Fase 1

2. ‚úÖ **Google Classroom Integration**
   - Modo dual: 12 menciones
   - API Integration: 25 menciones
   - Sync: 8 menciones
   - Ubicaci√≥n: Fase 2 y 4

3. ‚úÖ **Dashboards por Rol**
   - 4 dashboards documentados
   - Componentes espec√≠ficos
   - Ubicaci√≥n: Fase 2

4. ‚úÖ **Visualizaciones Avanzadas**
   - ApexCharts: 6 menciones
   - Interactividad: Documentada
   - Ubicaci√≥n: Fase 2 y 3

5. ‚úÖ **Sistema de B√∫squeda**
   - B√∫squeda avanzada: 8 menciones
   - Filtros: Documentados
   - Ubicaci√≥n: Fase 3

6. ‚úÖ **Notificaciones**
   - WebSocket: 10 menciones
   - Real-time: Documentado
   - Ubicaci√≥n: Fase 3

7. ‚úÖ **M√©tricas y Analytics**
   - KPIs: Documentados
   - Analytics: 5 menciones
   - Ubicaci√≥n: Fase 2 y 3

8. ‚úÖ **Accesibilidad**
   - WCAG 2.2 AA: 5 menciones
   - Completo en Fase 4
   - Ubicaci√≥n: Fase 4

9. ‚úÖ **Testing**
   - Estrategia completa
   - Archivo dedicado
   - Ubicaci√≥n: 06_plan_testing_strategy.md

10. ‚úÖ **CI/CD Pipeline**
    - GitHub Actions: 9 menciones
    - Docker: Documentado
    - Ubicaci√≥n: Fase 4

## ‚ö†Ô∏è Hallazgos Cr√≠ticos
Ninguno - Todas las funcionalidades est√°n cubiertas.

## ‚úÖ Recomendaciones
1. Mantener cobertura al agregar nuevas funcionalidades
2. Actualizar plan cuando specs agreguen features
3. Verificar implementaci√≥n vs plan peri√≥dicamente

## üìà Estado General
‚úÖ PASS (100% cobertura, objetivo: ‚â•95%)
```

---

## 8. PROMPT_ANALYZE_PLAN_COMPLEXITY

```markdown
# PROMPT: An√°lisis de Complejidad del Plan

## OBJETIVO
Analizar complejidad de instrucciones para asegurar ejecutabilidad por LLM.

## SCOPE
- **Directorio**: `/contracts/plan/`
- **Prioridad**: BAJA
- **Criterio de √©xito**: Complejidad ‚â§ MEDIUM

## M√âTRICAS DE COMPLEJIDAD

**Por archivo de fase:**
- D√≠as totales
- Pasos promedio por d√≠a
- Comandos promedio por paso
- Condicionales por secci√≥n
- Nivel de anidaci√≥n

**Umbrales:**
- Pasos por d√≠a: ‚â§10
- Comandos por paso: ‚â§5
- Condicionales: ‚â§3
- Anidaci√≥n: ‚â§2 niveles

## COMANDOS DE AN√ÅLISIS

```bash
# Contar d√≠as en cada fase
for file in contracts/plan/0[2-5]*.md; do
  echo "$file:"
  grep -c "^### D√≠a" "$file"
done

# Contar pasos/comandos
awk '/^### D√≠a/,/^### D√≠a/ {
  if(/^#### |^\*\*/) steps++
  if(/```bash/) commands++
} END {
  print "Steps:", steps
  print "Commands:", commands
}' contracts/plan/02_plan_fase1*.md

# Buscar condicionales
grep -c "if\|cuando\|si.*entonces" contracts/plan/0[2-5]*.md

# Buscar anidaci√≥n profunda
grep -E "^####|^#####|^######" contracts/plan/0[2-5]*.md
```

## OUTPUT ESPERADO: RESUMEN EJECUTIVO

# Resumen Ejecutivo: Complejidad del Plan

## üéØ Objetivo Cumplido
An√°lisis de complejidad de instrucciones del plan.

## üìä Resultados por Fase

### Fase 1: Fundaciones
- **D√≠as:** 12
- **Pasos promedio/d√≠a:** 4.5
- **Comandos promedio/paso:** 3.2
- **Condicionales:** 2
- **Nivel anidaci√≥n:** 2
- **Complejidad:** MEDIUM
- ‚úÖ Dentro de umbrales

### Fase 2: Google Integration
- **D√≠as:** 10
- **Pasos promedio/d√≠a:** 3.8
- **Comandos promedio/paso:** 2.9
- **Condicionales:** 1
- **Nivel anidaci√≥n:** 2
- **Complejidad:** LOW
- ‚úÖ Dentro de umbrales

### Fase 3: Visualizaci√≥n
- **D√≠as:** 10
- **Pasos promedio/d√≠a:** 3.5
- **Comandos promedio/paso:** 2.5
- **Condicionales:** 1
- **Nivel anidaci√≥n:** 2
- **Complejidad:** LOW
- ‚úÖ Dentro de umbrales

### Fase 4: Integraci√≥n
- **D√≠as:** 13
- **Pasos promedio/d√≠a:** 4.0
- **Comandos promedio/paso:** 3.0
- **Condicionales:** 2
- **Nivel anidaci√≥n:** 2
- **Complejidad:** MEDIUM
- ‚úÖ Dentro de umbrales

## ‚ö†Ô∏è Hallazgos Cr√≠ticos
Ninguno - Complejidad dentro de l√≠mites aceptables.

## ‚úÖ Recomendaciones
1. Mantener pasos simples y directos
2. Evitar condicionales complejos
3. Dividir d√≠as con >10 pasos
4. Limitar comandos por paso a 5

## üìà Estado General
‚úÖ PASS (Complejidad promedio: LOW-MEDIUM, objetivo: ‚â§MEDIUM)
```

---

## 9. PROMPT_ANALYZE_PLAN_RISKS

```markdown
# PROMPT: An√°lisis de Riesgos del Plan

## OBJETIVO
Identificar y validar mitigaci√≥n de riesgos t√©cnicos en el plan.

## SCOPE
- **Directorio**: `/contracts/plan/`
- **Prioridad**: BAJA
- **Criterio de √©xito**: 100% de riesgos mitigados

## RIESGOS A VALIDAR

**1. Dependencias Externas**
- **Riesgo:** Google API no disponible
- **Mitigaci√≥n esperada:** Mocks completos

**2. Compatibilidad de Versiones**
- **Riesgo:** Incompatibilidad entre librer√≠as
- **Mitigaci√≥n esperada:** Versiones espec√≠ficas documentadas

**3. Timeouts de Testing**
- **Riesgo:** Tests que cuelgan indefinidamente
- **Mitigaci√≥n esperada:** Timeouts configurados

**4. Performance**
- **Riesgo:** Carga lenta de dashboards
- **Mitigaci√≥n esperada:** M√©tricas < 2s documentadas

**5. Security Vulnerabilities**
- **Riesgo:** Vulnerabilidades en dependencias
- **Mitigaci√≥n esperada:** Escaneo autom√°tico (SAST, SCA, Trivy)

**6. Context Window Overflow**
- **Riesgo:** P√©rdida de contexto en LLM
- **Mitigaci√≥n esperada:** Chunking por prioridad

**7. Testing Coverage**
- **Riesgo:** C√≥digo sin tests
- **Mitigaci√≥n esperada:** TDD estricto, coverage ‚â•80%

**8. OAuth Failures**
- **Riesgo:** Fallos en autenticaci√≥n Google
- **Mitigaci√≥n esperada:** PKCE + State validation

## COMANDOS DE VERIFICACI√ìN

```bash
# Verificar mitigaciones
grep -r "mock" contracts/plan/03_plan_fase2*.md
grep -r "timeout" contracts/plan/06_plan_testing*.md
grep -r "performance\|<2s" contracts/plan/
grep -r "SAST\|SCA\|Trivy" contracts/plan/07_plan_security*.md
grep -r "chunking\|prioridad" contracts/plan/08_plan_context*.md
grep -r "TDD\|coverage" contracts/plan/
grep -r "PKCE\|State validation" contracts/plan/02_plan_fase1*.md
```

## OUTPUT ESPERADO: RESUMEN EJECUTIVO

# Resumen Ejecutivo: Riesgos del Plan

## üéØ Objetivo Cumplido
Validaci√≥n de mitigaci√≥n de riesgos t√©cnicos.

## üìä Resultados por Riesgo

### 1. Dependencias Externas
- **Severidad:** HIGH
- **Mitigaci√≥n:** ‚úÖ Documentada
- **Detalles:** Mock service completo en Fase 2
- **Ubicaci√≥n:** 03_plan_fase2_google_integration.md

### 2. Compatibilidad de Versiones
- **Severidad:** HIGH
- **Mitigaci√≥n:** ‚úÖ Documentada
- **Detalles:** Versiones espec√≠ficas en todos los archivos
- **Ubicaci√≥n:** Todas las fases

### 3. Timeouts de Testing
- **Severidad:** MEDIUM
- **Mitigaci√≥n:** ‚úÖ Documentada
- **Detalles:** 30s unit, 60s integration, 120s E2E
- **Ubicaci√≥n:** 06_plan_testing_strategy.md

### 4. Performance
- **Severidad:** MEDIUM
- **Mitigaci√≥n:** ‚úÖ Documentada
- **Detalles:** M√©tricas < 2s especificadas
- **Ubicaci√≥n:** 09_plan_evaluation_metrics.md

### 5. Security Vulnerabilities
- **Severidad:** CRITICAL
- **Mitigaci√≥n:** ‚úÖ Documentada
- **Detalles:** SAST, SCA, Trivy en CI/CD
- **Ubicaci√≥n:** 07_plan_security_protocols.md

### 6. Context Window Overflow
- **Severidad:** MEDIUM
- **Mitigaci√≥n:** ‚úÖ Documentada
- **Detalles:** Chunking CRITICAL‚ÜíLOW
- **Ubicaci√≥n:** 08_plan_context_management.md

### 7. Testing Coverage
- **Severidad:** HIGH
- **Mitigaci√≥n:** ‚úÖ Documentada
- **Detalles:** TDD estricto, ‚â•80% coverage
- **Ubicaci√≥n:** 06_plan_testing_strategy.md

### 8. OAuth Failures
- **Severidad:** HIGH
- **Mitigaci√≥n:** ‚úÖ Documentada
- **Detalles:** PKCE + State validation
- **Ubicaci√≥n:** 02_plan_fase1_fundaciones.md

## ‚ö†Ô∏è Hallazgos Cr√≠ticos
Ninguno - Todos los riesgos est√°n mitigados.

## ‚úÖ Recomendaciones
1. Revisar mitigaciones durante implementaci√≥n
2. Agregar nuevos riesgos identificados
3. Actualizar mitigaciones si cambian tecnolog√≠as
4. Ejecutar an√°lisis de riesgos peri√≥dicamente

## üìà Estado General
‚úÖ PASS (8/8 riesgos mitigados, 100%)
```

---

## 10. PROMPT_ANALYZE_PLAN_QUALITY

```markdown
# PROMPT: An√°lisis de Calidad del Plan

## OBJETIVO
Evaluar calidad global del plan usando m√©tricas objetivas.

## SCOPE
- **Directorio**: `/contracts/plan/`
- **Prioridad**: BAJA
- **Criterio de √©xito**: Calidad ‚â•90%

## M√âTRICAS A CALCULAR

**1. Precisi√≥n**
```
Precisi√≥n = (Especificaciones cumplidas / Especificaciones totales) √ó 100
Objetivo: ‚â•95%
```

**2. Completitud**
```
Completitud = (Archivos creados / Archivos requeridos) √ó 100
Objetivo: 100%
```

**3. Coherencia**
```
Coherencia = (T√©rminos consistentes / T√©rminos totales) √ó 100
Objetivo: ‚â•85%
```

**4. Seguridad**
```
Seguridad = (Protocolos implementados / Protocolos requeridos) √ó 100
Objetivo: 100%
```

**5. Calidad Global**
```
Calidad = (Precisi√≥n + Completitud + Coherencia + Seguridad) / 4
Objetivo: ‚â•90%
```

## COMANDOS DE C√ÅLCULO

```bash
# Precisi√≥n - contar specs cumplidas
SPECS_TOTAL=20
SPECS_CUMPLIDAS=$(grep -rc "FastAPI 0.104.1\|Next.js 15\|React 19" contracts/plan/ | awk -F: '{sum+=$2} END {print sum}')
PRECISION=$((SPECS_CUMPLIDAS * 100 / SPECS_TOTAL))

# Completitud - contar archivos
FILES_REQUIRED=10
FILES_CREATED=$(ls contracts/plan/*.md | wc -l)
COMPLETITUD=$((FILES_CREATED * 100 / FILES_REQUIRED))

# Coherencia - verificar t√©rminos
TERMS_TOTAL=10
TERMS_CONSISTENT=$(grep -r "FastAPI 0.104.1" contracts/plan/ | wc -l)
COHERENCIA=$((TERMS_CONSISTENT * 100 / TERMS_TOTAL))

# Seguridad - contar protocolos
PROTOCOLS_REQUIRED=5
PROTOCOLS_IMPLEMENTED=$(grep -c "SAST\|SCA\|Trivy\|PKCE\|Cero Confianza" contracts/plan/07_plan_security*.md)
SEGURIDAD=$((PROTOCOLS_IMPLEMENTED * 100 / PROTOCOLS_REQUIRED))

# Calidad global
CALIDAD=$(( (PRECISION + COMPLETITUD + COHERENCIA + SEGURIDAD) / 4 ))
```

## OUTPUT ESPERADO: RESUMEN EJECUTIVO

# Resumen Ejecutivo: Calidad del Plan

## üéØ Objetivo Cumplido
Evaluaci√≥n de calidad global del plan de desarrollo.

## üìä M√©tricas Principales

### 1. Precisi√≥n
- **Valor:** 96%
- **Objetivo:** ‚â•95%
- **Estado:** ‚úÖ PASS
- **Detalles:** 19/20 especificaciones cumplidas

### 2. Completitud
- **Valor:** 100%
- **Objetivo:** 100%
- **Estado:** ‚úÖ PASS
- **Detalles:** 10/10 archivos creados

### 3. Coherencia
- **Valor:** 95%
- **Objetivo:** ‚â•85%
- **Estado:** ‚úÖ PASS
- **Detalles:** T√©rminos consistentes en todo el plan

### 4. Seguridad
- **Valor:** 100%
- **Objetivo:** 100%
- **Estado:** ‚úÖ PASS
- **Detalles:** Todos los protocolos implementados

### 5. Calidad Global
- **Valor:** 97.75%
- **Objetivo:** ‚â•90%
- **Estado:** ‚úÖ EXCELLENT
- **Clasificaci√≥n:** EXCELLENT (‚â•90%)

## üìà Desglose Detallado

**Fortalezas:**
- ‚úÖ Completitud perfecta (100%)
- ‚úÖ Seguridad completa (100%)
- ‚úÖ Alta precisi√≥n (96%)
- ‚úÖ Excelente coherencia (95%)

**√Åreas de Mejora:**
- Agregar especificaci√≥n faltante para 100% precisi√≥n

## ‚úÖ Recomendaciones
1. Mantener calidad en actualizaciones futuras
2. Ejecutar este an√°lisis despu√©s de cambios mayores
3. Documentar nuevas m√©tricas si se introducen
4. Celebrar la excelente calidad lograda üéâ

## üìà Estado General
‚úÖ EXCELLENT (97.75% calidad, objetivo: ‚â•90%)

**Clasificaci√≥n:**
- 90-100%: EXCELLENT ‚Üê **Aqu√≠ estamos**
- 80-89%: GOOD
- 70-79%: ACCEPTABLE
- <70%: NEEDS IMPROVEMENT
```

---

# AN√ÅLISIS DE ESPECIFICACIONES

## 11. PROMPT_ANALYZE_SPECS_TRACEABILITY

```markdown
# PROMPT: An√°lisis de Trazabilidad de Especificaciones

## OBJETIVO
Verificar que todos los requisitos en especificaciones est√©n claramente definidos y sean trazables.

## SCOPE
- **Directorio**: `/contracts/principal/`
- **Prioridad**: ALTA
- **Criterio de √©xito**: 100% de requisitos identificables

## PASO 1: EXTRAER REQUISITOS

**Archivos a analizar:**
```bash
# Objetivos
grep -E "^###|^-" contracts/principal/04_ClassSphere_objetivos.md

# Funcionalidades
grep -E "^##|^###" contracts/principal/06_ClassSphere_funcionalidades.md

# API Endpoints
grep -E "^POST|^GET|^PUT|^DELETE" contracts/principal/07_ClassSphere_api_endpoints.md

# Testing
grep -E "^###|^-" contracts/principal/09_ClassSphere_testing.md
```

## PASO 2: VERIFICAR CLARIDAD

**Criterios de claridad:**
- Requisito tiene ID o nombre √∫nico
- Descripci√≥n clara y sin ambig√ºedades
- Criterios de aceptaci√≥n definidos
- Prioridad especificada

## PASO 3: VERIFICAR TRAZABILIDAD

**Comandos:**
```bash
# Contar requisitos por tipo
echo "Objetivos backend: $(grep -c "^### " contracts/principal/04_ClassSphere_objetivos.md)"
echo "Funcionalidades: $(grep -c "^## " contracts/principal/06_ClassSphere_funcionalidades.md)"
echo "Endpoints: $(grep -c "^POST\|^GET\|^PUT\|^DELETE" contracts/principal/07_ClassSphere_api_endpoints.md)"

# Verificar referencias cruzadas
grep -r "consulte\|ver\|referencia" contracts/principal/
```

## OUTPUT ESPERADO: RESUMEN EJECUTIVO

# Resumen Ejecutivo: Trazabilidad de Especificaciones

## üéØ Objetivo Cumplido
Validaci√≥n de claridad y trazabilidad de requisitos en especificaciones.

## üìä Resultados Principales

**Requisitos identificados:** 150
**Requisitos claros:** 150
**Requisitos trazables:** 150
**Claridad:** 100%

### Desglose por Documento

**04_ClassSphere_objetivos.md:**
- Objetivos backend: 15
- Objetivos frontend: 12
- Objetivos integrados: 8
- ‚úÖ Todos claros y trazables

**06_ClassSphere_funcionalidades.md:**
- Funcionalidades principales: 10
- Subfuncionalidades: 45
- ‚úÖ Todas con descripci√≥n clara

**07_ClassSphere_api_endpoints.md:**
- Endpoints documentados: 50
- ‚úÖ Todos con m√©todo, path y descripci√≥n

**09_ClassSphere_testing.md:**
- Estrategias: 5
- Requisitos de cobertura: 10
- ‚úÖ Todos medibles

## ‚ö†Ô∏è Hallazgos Cr√≠ticos
Ninguno - Todos los requisitos son claros y trazables.

## ‚úÖ Recomendaciones
1. Mantener este nivel de claridad en actualizaciones
2. Agregar IDs √∫nicos a nuevos requisitos
3. Documentar criterios de aceptaci√≥n siempre
4. Mantener referencias cruzadas actualizadas

## üìà Estado General
‚úÖ PASS (100% trazabilidad)
```

---

## 12. PROMPT_ANALYZE_SPECS_COHERENCE

```markdown
# PROMPT: An√°lisis de Coherencia de Especificaciones

## OBJETIVO
Validar consistencia de t√©rminos t√©cnicos en las especificaciones.

## SCOPE
- **Directorio**: `/contracts/principal/`
- **Prioridad**: ALTA
- **Criterio de √©xito**: ‚â•85% de coherencia

## T√âRMINOS A VALIDAR

**Versiones:**
- FastAPI, Next.js, React, Pydantic, ApexCharts

**Configuraciones:**
- Puerto, Cobertura, Testing stack

**Metodolog√≠a:**
- TDD, Seguridad, Accesibilidad

## COMANDOS DE VERIFICACI√ìN

```bash
# Verificar versiones
grep -r "FastAPI" contracts/principal/ | grep -v "0.104.1"
grep -r "Next\.js" contracts/principal/ | grep -v "15"
grep -r "React" contracts/principal/ | grep -v "19"

# Verificar configuraciones
grep -r "puerto" contracts/principal/ | grep -v "8000"

# Contar menciones correctas
echo "FastAPI 0.104.1: $(grep -rc "FastAPI 0.104.1" contracts/principal/ | awk -F: '{sum+=$2} END {print sum}')"
```

## OUTPUT ESPERADO: RESUMEN EJECUTIVO

# Resumen Ejecutivo: Coherencia de Especificaciones

## üéØ Objetivo Cumplido
Validaci√≥n de consistencia de t√©rminos en especificaciones.

## üìä Resultados Principales

### Versiones de Tecnolog√≠as
- ‚úÖ FastAPI 0.104.1: 100% consistente (8/8)
- ‚úÖ Next.js 15: 100% consistente (6/6)
- ‚úÖ React 19: 100% consistente (5/5)
- ‚úÖ Pydantic v2: 100% consistente (4/4)

### Configuraciones
- ‚úÖ Puerto 8000: 100% consistente (5/5)
- ‚úÖ Cobertura ‚â•80%: 100% consistente (10/10)

## ‚ö†Ô∏è Hallazgos Cr√≠ticos
Ninguno - Todos los t√©rminos son consistentes.

## ‚úÖ Recomendaciones
1. Mantener coherencia en actualizaciones
2. Validar nuevos t√©rminos antes de agregar
3. Usar b√∫squeda/reemplazo global para cambios

## üìà Estado General
‚úÖ PASS (100% coherencia, objetivo: ‚â•85%)
```

---

## 13. PROMPT_ANALYZE_SPECS_DEPENDENCIES

```markdown
# PROMPT: An√°lisis de Dependencias de Especificaciones

## OBJETIVO
Verificar que dependencias entre componentes est√©n identificadas en especificaciones.

## SCOPE
- **Directorio**: `/contracts/principal/`
- **Prioridad**: ALTA
- **Criterio de √©xito**: 100% de dependencias identificadas

## DEPENDENCIAS A BUSCAR

**Dependencias t√©cnicas:**
- OAuth requiere JWT
- Dashboards requieren autenticaci√≥n
- Visualizaciones requieren datos
- Sync requiere Google API

**Dependencias de fase:**
- Fase 2 requiere Fase 1
- Fase 3 requiere Fase 2
- Fase 4 requiere Fase 3

## COMANDOS

```bash
# Buscar menciones de dependencias
grep -r "requiere\|depende\|necesita" contracts/principal/

# Verificar documentaci√≥n de dependencias
grep -A 5 "Dependencias" contracts/principal/10_ClassSphere_plan_implementacion.md
```

## OUTPUT ESPERADO: RESUMEN EJECUTIVO

# Resumen Ejecutivo: Dependencias de Especificaciones

## üéØ Objetivo Cumplido
Validaci√≥n de identificaci√≥n de dependencias.

## üìä Resultados Principales

**Dependencias identificadas:** 15
**Dependencias documentadas:** 15
**Cobertura:** 100%

### Dependencias T√©cnicas
- ‚úÖ OAuth ‚Üí JWT: Documentado
- ‚úÖ Dashboards ‚Üí Auth: Documentado
- ‚úÖ Visualizaciones ‚Üí Datos: Documentado
- ‚úÖ Sync ‚Üí Google API: Documentado

### Dependencias de Fase
- ‚úÖ Fase 2 ‚Üí Fase 1: Documentado
- ‚úÖ Fase 3 ‚Üí Fase 2: Documentado
- ‚úÖ Fase 4 ‚Üí Fase 3: Documentado

## ‚ö†Ô∏è Hallazgos Cr√≠ticos
Ninguno - Todas las dependencias identificadas.

## ‚úÖ Recomendaciones
1. Documentar nuevas dependencias inmediatamente
2. Mantener matriz de dependencias actualizada
3. Validar dependencias antes de implementaci√≥n

## üìà Estado General
‚úÖ PASS (100% dependencias identificadas)
```

---

## 14. PROMPT_ANALYZE_SPECS_PATTERNS

```markdown
# PROMPT: An√°lisis de Patrones de Especificaciones

## OBJETIVO
Verificar que patrones arquitect√≥nicos est√©n claramente definidos en especificaciones.

## SCOPE
- **Directorio**: `/contracts/principal/`
- **Prioridad**: MEDIA
- **Criterio de √©xito**: ‚â•80% de patrones documentados

## PATRONES A BUSCAR

1. TDD Estricto
2. Context-Aware Services
3. Anti Lost-in-the-Middle
4. Cero Confianza
5. Logs Estructurados

## COMANDOS

```bash
grep -c "TDD\|Test-Driven" contracts/principal/*.md
grep -c "Context-Aware\|contexto" contracts/principal/*.md
grep -c "Lost-in-the-Middle" contracts/principal/*.md
grep -c "Cero Confianza\|Zero Trust" contracts/principal/*.md
```

## OUTPUT ESPERADO: RESUMEN EJECUTIVO

# Resumen Ejecutivo: Patrones de Especificaciones

## üéØ Objetivo Cumplido
Validaci√≥n de definici√≥n de patrones arquitect√≥nicos.

## üìä Resultados Principales

**Patrones totales:** 5
**Patrones documentados:** 5
**Cobertura:** 100%

### Desglose por Patr√≥n
- ‚úÖ TDD Estricto: 12 menciones
- ‚úÖ Context-Aware: 8 menciones
- ‚úÖ Anti Lost-in-the-Middle: 6 menciones
- ‚úÖ Cero Confianza: 5 menciones
- ‚úÖ Logs Estructurados: 7 menciones

## ‚ö†Ô∏è Hallazgos Cr√≠ticos
Ninguno - Todos los patrones est√°n documentados.

## ‚úÖ Recomendaciones
1. Agregar ejemplos de implementaci√≥n
2. Documentar nuevos patrones si se introducen
3. Mantener consistencia en definiciones

## üìà Estado General
‚úÖ PASS (100% patrones documentados, objetivo: ‚â•80%)
```

---

## 15. PROMPT_ANALYZE_SPECS_COMPLETENESS

```markdown
# PROMPT: An√°lisis de Completitud de Especificaciones

## OBJETIVO
Verificar que todas las √°reas del sistema est√©n documentadas en especificaciones.

## SCOPE
- **Directorio**: `/contracts/principal/`
- **Prioridad**: MEDIA
- **Criterio de √©xito**: ‚â•95% de √°reas cubiertas

## √ÅREAS A VERIFICAR

1. Arquitectura
2. Funcionalidades
3. API Endpoints
4. Modelos de Datos
5. Testing
6. Deployment
7. Seguridad
8. Accesibilidad

## COMANDOS

```bash
# Verificar archivos de especificaciones
ls contracts/principal/*.md

# Contar secciones por √°rea
for file in contracts/principal/*.md; do
  echo "$(basename $file): $(grep -c "^##" $file) secciones"
done
```

## OUTPUT ESPERADO: RESUMEN EJECUTIVO

# Resumen Ejecutivo: Completitud de Especificaciones

## üéØ Objetivo Cumplido
Validaci√≥n de cobertura de √°reas del sistema.

## üìä Resultados Principales

**√Åreas totales:** 8
**√Åreas documentadas:** 8
**Cobertura:** 100%

### Desglose por √Årea
- ‚úÖ Arquitectura: 05_ClassSphere_arquitectura.md
- ‚úÖ Funcionalidades: 06_ClassSphere_funcionalidades.md
- ‚úÖ API Endpoints: 07_ClassSphere_api_endpoints.md
- ‚úÖ Modelos de Datos: 08_ClassSphere_modelos_datos.md
- ‚úÖ Testing: 09_ClassSphere_testing.md
- ‚úÖ Deployment: 11_ClassSphere_deployment.md
- ‚úÖ Seguridad: Integrado en m√∫ltiples archivos
- ‚úÖ Accesibilidad: 06_ClassSphere_funcionalidades.md

## ‚ö†Ô∏è Hallazgos Cr√≠ticos
Ninguno - Todas las √°reas est√°n documentadas.

## ‚úÖ Recomendaciones
1. Mantener cobertura al agregar nuevas √°reas
2. Actualizar documentaci√≥n regularmente
3. Validar completitud peri√≥dicamente

## üìà Estado General
‚úÖ PASS (100% cobertura, objetivo: ‚â•95%)
```

---

## 16. PROMPT_ANALYZE_SPECS_COMPLEXITY

```markdown
# PROMPT: An√°lisis de Complejidad de Especificaciones

## OBJETIVO
Evaluar claridad y simplicidad de las especificaciones.

## SCOPE
- **Directorio**: `/contracts/principal/`
- **Prioridad**: BAJA
- **Criterio de √©xito**: Complejidad ‚â§ MEDIUM

## M√âTRICAS

- Longitud promedio de secciones
- Nivel de anidaci√≥n
- Uso de jerga t√©cnica
- Claridad de ejemplos

## COMANDOS

```bash
# Contar niveles de encabezados
grep -E "^#{4,}" contracts/principal/*.md | wc -l

# Contar palabras por archivo
for file in contracts/principal/*.md; do
  wc -w "$file"
done
```

## OUTPUT ESPERADO: RESUMEN EJECUTIVO

# Resumen Ejecutivo: Complejidad de Especificaciones

## üéØ Objetivo Cumplido
Evaluaci√≥n de claridad de especificaciones.

## üìä Resultados Principales

**Complejidad promedio:** LOW-MEDIUM
**Claridad:** ALTA

### Desglose por Archivo
- 04_objetivos.md: LOW
- 05_arquitectura.md: MEDIUM
- 06_funcionalidades.md: LOW
- 09_testing.md: MEDIUM

## ‚ö†Ô∏è Hallazgos Cr√≠ticos
Ninguno - Especificaciones claras y comprensibles.

## ‚úÖ Recomendaciones
1. Mantener claridad en actualizaciones
2. Agregar ejemplos cuando sea necesario
3. Evitar anidaci√≥n profunda

## üìà Estado General
‚úÖ PASS (Complejidad LOW-MEDIUM, objetivo: ‚â§MEDIUM)
```

---

## 17. PROMPT_ANALYZE_SPECS_RISKS

```markdown
# PROMPT: An√°lisis de Riesgos de Especificaciones

## OBJETIVO
Verificar que riesgos t√©cnicos est√©n identificados en especificaciones.

## SCOPE
- **Directorio**: `/contracts/principal/`
- **Prioridad**: BAJA
- **Criterio de √©xito**: Principales riesgos identificados

## RIESGOS A BUSCAR

1. Dependencias externas
2. Compatibilidad
3. Performance
4. Seguridad
5. Escalabilidad

## COMANDOS

```bash
grep -r "riesgo\|risk\|problema\|issue" contracts/principal/
grep -r "mitigaci√≥n\|mitigation" contracts/principal/
```

## OUTPUT ESPERADO: RESUMEN EJECUTIVO

# Resumen Ejecutivo: Riesgos de Especificaciones

## üéØ Objetivo Cumplido
Identificaci√≥n de riesgos en especificaciones.

## üìä Resultados Principales

**Riesgos identificados:** 5
**Riesgos con mitigaci√≥n:** 5
**Cobertura:** 100%

### Riesgos Documentados
- ‚úÖ Google API dependency: Identificado
- ‚úÖ Compatibilidad versiones: Identificado
- ‚úÖ Performance requirements: Identificado
- ‚úÖ Security vulnerabilities: Identificado
- ‚úÖ Context overflow: Identificado

## ‚ö†Ô∏è Hallazgos Cr√≠ticos
Ninguno - Principales riesgos identificados.

## ‚úÖ Recomendaciones
1. Documentar nuevos riesgos al identificarlos
2. Actualizar mitigaciones regularmente
3. Revisar riesgos antes de cada fase

## üìà Estado General
‚úÖ PASS (Principales riesgos identificados)
```

---

## 18. PROMPT_ANALYZE_SPECS_QUALITY

```markdown
# PROMPT: An√°lisis de Calidad de Especificaciones

## OBJETIVO
Evaluar calidad global de las especificaciones.

## SCOPE
- **Directorio**: `/contracts/principal/`
- **Prioridad**: BAJA
- **Criterio de √©xito**: Calidad ‚â•90%

## M√âTRICAS

1. Claridad (‚â•90%)
2. Completitud (100%)
3. Coherencia (‚â•85%)
4. Trazabilidad (100%)

## COMANDOS

```bash
# Contar archivos
ls contracts/principal/*.md | wc -l

# Verificar coherencia
grep -r "FastAPI" contracts/principal/ | grep -v "0.104.1"

# Verificar completitud
grep -c "^##" contracts/principal/*.md
```

## OUTPUT ESPERADO: RESUMEN EJECUTIVO

# Resumen Ejecutivo: Calidad de Especificaciones

## üéØ Objetivo Cumplido
Evaluaci√≥n de calidad global de especificaciones.

## üìä M√©tricas Principales

### 1. Claridad
- **Valor:** 95%
- **Estado:** ‚úÖ PASS

### 2. Completitud
- **Valor:** 100%
- **Estado:** ‚úÖ PASS

### 3. Coherencia
- **Valor:** 100%
- **Estado:** ‚úÖ PASS

### 4. Trazabilidad
- **Valor:** 100%
- **Estado:** ‚úÖ PASS

### 5. Calidad Global
- **Valor:** 98.75%
- **Estado:** ‚úÖ EXCELLENT

## ‚ö†Ô∏è Hallazgos Cr√≠ticos
Ninguno - Especificaciones de excelente calidad.

## ‚úÖ Recomendaciones
1. Mantener este nivel de calidad
2. Validar calidad despu√©s de actualizaciones
3. Usar como referencia para nuevos documentos

## üìà Estado General
‚úÖ EXCELLENT (98.75% calidad, objetivo: ‚â•90%)
```

---

# AN√ÅLISIS COMPARATIVO

## 19. PROMPT_COMPARE_PLAN_SPECS

```markdown
# PROMPT: Comparar Plan con Especificaciones

## OBJETIVO
Verificar que el plan est√© completamente sincronizado con las especificaciones.

## SCOPE
- **Source**: `/contracts/principal/` (especificaciones)
- **Target**: `/contracts/plan/` (plan de desarrollo)
- **Prioridad**: ALTA
- **Criterio de √©xito**: ‚â•98% de sincronizaci√≥n

## PASO 1: COMPARAR REQUISITOS

**Comandos:**
```bash
# Extraer requisitos de specs
grep -r "FastAPI\|Next.js\|React\|OAuth\|JWT" contracts/principal/ > /tmp/specs_requirements.txt

# Extraer requisitos de plan
grep -r "FastAPI\|Next.js\|React\|OAuth\|JWT" contracts/plan/ > /tmp/plan_requirements.txt

# Comparar
diff /tmp/specs_requirements.txt /tmp/plan_requirements.txt
```

## PASO 2: COMPARAR VERSIONES

**Comandos:**
```bash
# Versi√≥n en specs
SPECS_FASTAPI=$(grep -m1 "FastAPI" contracts/principal/05_ClassSphere_arquitectura.md | grep -oP '\d+\.\d+\.\d+')

# Versi√≥n en plan
PLAN_FASTAPI=$(grep -m1 "FastAPI" contracts/plan/02_plan_fase1_fundaciones.md | grep -oP '\d+\.\d+\.\d+')

# Comparar
if [ "$SPECS_FASTAPI" != "$PLAN_FASTAPI" ]; then
  echo "MISMATCH: Specs=$SPECS_FASTAPI, Plan=$PLAN_FASTAPI"
fi
```

## PASO 3: COMPARAR FUNCIONALIDADES

**Comandos:**
```bash
# Funcionalidades en specs
SPECS_FEATURES=$(grep -c "^### " contracts/principal/06_ClassSphere_funcionalidades.md)

# Funcionalidades en plan
PLAN_FEATURES=$(grep -rc "Funcionalidad\|Feature" contracts/plan/0[2-5]*.md | awk -F: '{sum+=$2} END {print sum}')

# Calcular cobertura
COVERAGE=$((PLAN_FEATURES * 100 / SPECS_FEATURES))
echo "Cobertura: $COVERAGE%"
```

## PASO 4: IDENTIFICAR GAPS

**An√°lisis:**
- Requisitos en specs pero no en plan
- Requisitos en plan pero no en specs
- Versiones desincronizadas
- Funcionalidades faltantes

## OUTPUT ESPERADO: RESUMEN EJECUTIVO

# Resumen Ejecutivo: Comparaci√≥n Plan vs Especificaciones

## üéØ Objetivo Cumplido
Verificaci√≥n de sincronizaci√≥n entre plan y especificaciones.

## üìä Resultados de Comparaci√≥n

### 1. Trazabilidad Bidireccional
**Requisitos en specs:** 150
**Requisitos en plan:** 147
**Sincronizaci√≥n:** 98%

**Faltantes en plan:**
- ‚ùå Requisito de backup autom√°tico diario
- ‚ùå Requisito de notificaciones por Telegram
- ‚ùå Requisito de exportaci√≥n a Excel

**Extra en plan:**
- ‚ÑπÔ∏è Detalles de implementaci√≥n tmux (no en specs)

### 2. Coherencia de Versiones
- ‚úÖ FastAPI: 0.104.1 (sincronizado)
- ‚úÖ Next.js: 15 (sincronizado)
- ‚úÖ React: 19 (sincronizado)
- ‚úÖ Pydantic: v2 (sincronizado)
- ‚úÖ ApexCharts: 5.3.5 (sincronizado)

### 3. Cobertura Funcional
**Funcionalidades en specs:** 10
**Funcionalidades en plan:** 10
**Cobertura:** 100%

### 4. Completitud Cruzada
- ‚úÖ Autenticaci√≥n: Sincronizado
- ‚úÖ Google Integration: Sincronizado
- ‚úÖ Dashboards: Sincronizado
- ‚úÖ Visualizaciones: Sincronizado
- ‚úÖ Testing: Sincronizado
- ‚úÖ CI/CD: Sincronizado
- ‚úÖ Accesibilidad: Sincronizado

## ‚ö†Ô∏è Hallazgos Cr√≠ticos

**Desincronizaciones encontradas:**
1. **Backup autom√°tico diario** no est√° en plan
   - Severidad: MEDIUM
   - Acci√≥n: Agregar a Fase 4

2. **Notificaciones Telegram** no est√° en plan
   - Severidad: LOW
   - Acci√≥n: Agregar a Fase 3 (ya est√° como mock)

3. **Exportaci√≥n Excel** no est√° en plan
   - Severidad: LOW
   - Acci√≥n: Agregar a Fase 3

## ‚úÖ Recomendaciones

**Inmediatas:**
1. Actualizar Fase 4 con backup autom√°tico diario
2. Verificar que Telegram est√© como mock en Fase 3
3. Agregar exportaci√≥n Excel en Fase 3

**A corto plazo:**
4. Ejecutar este an√°lisis despu√©s de cada cambio en specs
5. Mantener sincronizaci√≥n bidireccional
6. Documentar cambios en ambos lados

**A largo plazo:**
7. Automatizar verificaci√≥n de sincronizaci√≥n
8. Crear matriz de trazabilidad
9. Implementar CI check para sincronizaci√≥n

## üìà Estado General
‚ö†Ô∏è NEEDS_SYNC (98% sincronizaci√≥n, objetivo: ‚â•98%)

**Acciones requeridas:** 3
**Prioridad:** MEDIUM
**Tiempo estimado:** 2 horas
```

---

## 20. PROMPT_SYNC_CHECK

```markdown
# PROMPT: Verificar Sincronizaci√≥n Plan-Specs

## OBJETIVO
Verificaci√≥n r√°pida de sincronizaci√≥n entre plan y especificaciones.

## SCOPE
- **Source**: `/contracts/principal/`
- **Target**: `/contracts/plan/`
- **Prioridad**: ALTA
- **Criterio de √©xito**: 100% sincronizado

## VERIFICACIONES R√ÅPIDAS

### 1. Versiones de Tecnolog√≠as

```bash
# Comparar FastAPI
diff <(grep "FastAPI" contracts/principal/05_ClassSphere_arquitectura.md | head -1) \
     <(grep "FastAPI" contracts/plan/02_plan_fase1_fundaciones.md | head -1)

# Comparar Next.js
diff <(grep "Next.js" contracts/principal/05_ClassSphere_arquitectura.md | head -1) \
     <(grep "Next.js" contracts/plan/02_plan_fase1_fundaciones.md | head -1)

# Comparar React
diff <(grep "React" contracts/principal/05_ClassSphere_arquitectura.md | head -1) \
     <(grep "React" contracts/plan/02_plan_fase1_fundaciones.md | head -1)
```

### 2. √öltima Modificaci√≥n

```bash
# Ver √∫ltima modificaci√≥n de specs
git log -1 --format="%ai" contracts/principal/

# Ver √∫ltima modificaci√≥n de plan
git log -1 --format="%ai" contracts/plan/

# Comparar timestamps
```

### 3. Conteo de Requisitos

```bash
# Contar en specs
SPECS_COUNT=$(grep -rc "FastAPI\|OAuth\|JWT\|WebSocket" contracts/principal/ | awk -F: '{sum+=$2} END {print sum}')

# Contar en plan
PLAN_COUNT=$(grep -rc "FastAPI\|OAuth\|JWT\|WebSocket" contracts/plan/ | awk -F: '{sum+=$2} END {print sum}')

# Comparar
echo "Specs: $SPECS_COUNT, Plan: $PLAN_COUNT"
```

### 4. Cambios Pendientes

```bash
# Ver si hay cambios no sincronizados
git diff HEAD contracts/principal/ --name-only
git diff HEAD contracts/plan/ --name-only
```

## OUTPUT ESPERADO: RESUMEN EJECUTIVO

# Resumen Ejecutivo: Verificaci√≥n de Sincronizaci√≥n

## üéØ Objetivo Cumplido
Verificaci√≥n r√°pida de sincronizaci√≥n plan-specs.

## üìä Resultados de Verificaci√≥n

### 1. Versiones de Tecnolog√≠as
- ‚úÖ FastAPI: Sincronizado (0.104.1)
- ‚úÖ Next.js: Sincronizado (15)
- ‚úÖ React: Sincronizado (19)
- ‚úÖ Pydantic: Sincronizado (v2)
- ‚úÖ ApexCharts: Sincronizado (5.3.5)

### 2. Timestamps
- **Specs √∫ltima modificaci√≥n:** 2025-10-05 06:45:00
- **Plan √∫ltima modificaci√≥n:** 2025-10-05 07:30:00
- **Diferencia:** 45 minutos
- ‚úÖ Plan m√°s reciente que specs

### 3. Conteo de Requisitos
- **Specs:** 150 menciones
- **Plan:** 147 menciones
- **Diferencia:** 3 menciones (2%)
- ‚ö†Ô∏è Peque√±a desincronizaci√≥n

### 4. Cambios Pendientes
- **Specs sin commit:** 0 archivos
- **Plan sin commit:** 0 archivos
- ‚úÖ Todo commiteado

## ‚ö†Ô∏è Hallazgos

**Desincronizaci√≥n menor detectada:**
- 3 menciones de requisitos faltantes en plan
- Diferencia: 2%
- Severidad: LOW

## ‚úÖ Recomendaciones

**Si sincronizaci√≥n < 98%:**
1. Ejecutar PROMPT_COMPARE_PLAN_SPECS para an√°lisis detallado
2. Identificar requisitos faltantes
3. Actualizar plan con PROMPT_UPDATE_PLAN

**Si sincronizaci√≥n ‚â• 98%:**
1. Monitorear cambios en specs
2. Ejecutar sync check despu√©s de cada actualizaci√≥n
3. Mantener sincronizaci√≥n proactiva

## üìà Estado General
‚úÖ SYNCHRONIZED (98% sync, objetivo: ‚â•98%)

**Pr√≥xima verificaci√≥n:** Despu√©s de pr√≥ximo cambio en specs
**Frecuencia recomendada:** Despu√©s de cada actualizaci√≥n
```

---

## 21. PROMPT_ANALYZE_BEST_PRACTICES_COMPLIANCE

```markdown
# PROMPT: An√°lisis de Cumplimiento con Mejores Pr√°cticas LLM

## OBJETIVO
Verificar que el plan de desarrollo cumple completamente con las mejores pr√°cticas definidas en @SOFTWARE_PROJECT_BEST_PRACTICES.md.

## SCOPE
- **Source**: @SOFTWARE_PROJECT_BEST_PRACTICES.md (mejores pr√°cticas)
- **Target**: `/contracts/plan/` (plan de desarrollo)
- **Prioridad**: CRITICAL
- **Criterio de √©xito**: ‚â•95% de cumplimiento

## PASO 1: EXTRAER REQUISITOS DE MEJORES PR√ÅCTICAS

**Archivo fuente:**
```bash
# Leer mejores pr√°cticas
cat contracts/extra/SOFTWARE_PROJECT_BEST_PRACTICES.md
```

**Requisitos clave a verificar:**
1. **Context Window Management**
   - Chunking por prioridad (CRITICAL/HIGH/MEDIUM/LOW)
   - Estructura anti lost-in-the-middle
   - Logs estructurados con context_id

2. **Arquitectura Context-Aware**
   - Servicios conscientes del contexto
   - Gesti√≥n de memoria optimizada
   - Identificadores √∫nicos por fase

3. **Seguridad y Verificaci√≥n**
   - Principio de cero confianza
   - Escaneo autom√°tico (SAST, SCA, Secrets)
   - Prompt engineering de seguridad

4. **M√©tricas de Evaluaci√≥n**
   - Precisi√≥n ‚â•95%
   - Calidad t√©cnica ‚â•90%
   - Coherencia sem√°ntica ‚â•85%

5. **Optimizaci√≥n de Recursos**
   - Balance entre tama√±o y costo
   - Fine-tuning vs construcci√≥n desde cero
   - Gesti√≥n eficiente de contexto

## PASO 2: VERIFICAR CUMPLIMIENTO EN PLAN

**Comandos de verificaci√≥n:**
```bash
# Context Window Management
grep -r "chunking\|prioridad\|CRITICAL\|HIGH\|MEDIUM\|LOW" contracts/plan/
grep -r "lost-in-the-middle\|INICIO.*MEDIO.*FINAL" contracts/plan/
grep -r "context_id\|token_count\|logs estructurados" contracts/plan/

# Arquitectura Context-Aware
grep -r "Context-Aware\|consciente.*contexto\|gesti√≥n.*memoria" contracts/plan/
grep -r "identificador.*√∫nico\|context.*management" contracts/plan/

# Seguridad y Verificaci√≥n
grep -r "cero confianza\|zero trust\|SAST\|SCA" contracts/plan/
grep -r "escaneo.*autom√°tico\|secrets.*detection" contracts/plan/
grep -r "prompt.*engineering.*seguridad" contracts/plan/

# M√©tricas de Evaluaci√≥n
grep -r "precisi√≥n.*95\|calidad.*90\|coherencia.*85" contracts/plan/
grep -r "m√©tricas.*evaluaci√≥n\|medici√≥n.*objetiva" contracts/plan/

# Optimizaci√≥n de Recursos
grep -r "balance.*tama√±o.*costo\|optimizaci√≥n.*recursos" contracts/plan/
grep -r "fine-tuning\|gesti√≥n.*eficiente" contracts/plan/
```

## PASO 3: CALCULAR CUMPLIMIENTO POR CATEGOR√çA

**F√≥rmula de cumplimiento:**
```
Cumplimiento = (Requisitos implementados / Requisitos totales) √ó 100
```

**Categor√≠as a evaluar:**
1. Context Window Management (5 requisitos)
2. Arquitectura Context-Aware (3 requisitos)
3. Seguridad y Verificaci√≥n (3 requisitos)
4. M√©tricas de Evaluaci√≥n (3 requisitos)
5. Optimizaci√≥n de Recursos (3 requisitos)

## PASO 4: IDENTIFICAR GAPS Y RECOMENDACIONES

**An√°lisis de gaps:**
- Requisitos no implementados
- Implementaci√≥n parcial
- Requisitos mal documentados
- Inconsistencias encontradas

## OUTPUT ESPERADO: RESUMEN EJECUTIVO

# Resumen Ejecutivo: Cumplimiento con Mejores Pr√°cticas LLM

## üéØ Objetivo Cumplido
Verificaci√≥n de cumplimiento del plan con @SOFTWARE_PROJECT_BEST_PRACTICES.md.

## üìä Resultados de Cumplimiento

**Cumplimiento global:** 96%
**Criterio de √©xito:** ‚â•95%
**Estado:** ‚úÖ PASS

### Desglose por Categor√≠a

#### 1. Context Window Management
- **Requisitos:** 5
- **Implementados:** 5
- **Cumplimiento:** 100%
- **Estado:** ‚úÖ EXCELLENT

**Detalles:**
- ‚úÖ Chunking por prioridad: CRITICAL/HIGH/MEDIUM/LOW implementado
- ‚úÖ Estructura anti lost-in-the-middle: INICIO-MEDIO-FINAL presente
- ‚úÖ Logs estructurados: context_id y token_count documentados
- ‚úÖ L√≠mites de tokens: 2000/1500/1000/800 especificados
- ‚úÖ Gesti√≥n de contexto: Optimizada para LLMs

#### 2. Arquitectura Context-Aware
- **Requisitos:** 3
- **Implementados:** 3
- **Cumplimiento:** 100%
- **Estado:** ‚úÖ EXCELLENT

**Detalles:**
- ‚úÖ Servicios conscientes del contexto: Documentados
- ‚úÖ Gesti√≥n de memoria: Optimizada con seguimiento
- ‚úÖ Identificadores √∫nicos: Por fase implementado

#### 3. Seguridad y Verificaci√≥n
- **Requisitos:** 3
- **Implementados:** 3
- **Cumplimiento:** 100%
- **Estado:** ‚úÖ EXCELLENT

**Detalles:**
- ‚úÖ Principio de cero confianza: Aplicado completamente
- ‚úÖ Escaneo autom√°tico: SAST, SCA, Secrets detection
- ‚úÖ Prompt engineering de seguridad: Integrado

#### 4. M√©tricas de Evaluaci√≥n
- **Requisitos:** 3
- **Implementados:** 3
- **Cumplimiento:** 100%
- **Estado:** ‚úÖ EXCELLENT

**Detalles:**
- ‚úÖ Precisi√≥n ‚â•95%: Documentada y verificable
- ‚úÖ Calidad t√©cnica ‚â•90%: M√©tricas espec√≠ficas
- ‚úÖ Coherencia sem√°ntica ‚â•85%: Validada

#### 5. Optimizaci√≥n de Recursos
- **Requisitos:** 3
- **Implementados:** 2
- **Cumplimiento:** 67%
- **Estado:** ‚ö†Ô∏è NEEDS IMPROVEMENT

**Detalles:**
- ‚úÖ Balance entre tama√±o y costo: Considerado
- ‚ùå Fine-tuning vs construcci√≥n desde cero: No especificado
- ‚úÖ Gesti√≥n eficiente de contexto: Implementada

## ‚ö†Ô∏è Hallazgos Cr√≠ticos

**Gap identificado:**
- **Optimizaci√≥n de Recursos**: Falta especificaci√≥n de fine-tuning vs construcci√≥n desde cero
- **Severidad**: MEDIUM
- **Impacto**: Bajo (no afecta funcionalidad core)

## ‚úÖ Recomendaciones

### Inmediatas
1. **Agregar especificaci√≥n de fine-tuning**: Documentar cu√°ndo usar fine-tuning vs construcci√≥n desde cero
2. **Completar optimizaci√≥n de recursos**: Llegar a 100% cumplimiento

### A corto plazo
3. **Mantener cumplimiento**: Ejecutar este an√°lisis despu√©s de cada actualizaci√≥n
4. **Documentar nuevas mejores pr√°cticas**: Si se agregan al documento fuente

### A largo plazo
5. **Automatizar verificaci√≥n**: Crear script que valide cumplimiento autom√°ticamente
6. **Integrar en CI/CD**: Verificar cumplimiento como parte del pipeline

## üìà Beneficios del Cumplimiento

### T√©cnicos
- **Context Management**: Optimizaci√≥n de ventana de contexto para LLMs
- **Seguridad**: Protecci√≥n completa con principio de cero confianza
- **Calidad**: M√©tricas objetivas y verificables
- **Eficiencia**: Gesti√≥n optimizada de recursos

### Operacionales
- **Mantenibilidad**: Plan estructurado y coherente
- **Escalabilidad**: Arquitectura preparada para crecimiento
- **Confiabilidad**: Verificaci√≥n autom√°tica de cumplimiento
- **Documentaci√≥n**: Est√°ndares claros y aplicables

## üìà Estado General
‚úÖ EXCELLENT (96% cumplimiento, objetivo: ‚â•95%)

**Clasificaci√≥n:**
- 95-100%: EXCELLENT ‚Üê **Aqu√≠ estamos**
- 85-94%: GOOD
- 70-84%: ACCEPTABLE
- <70%: NEEDS IMPROVEMENT

**Pr√≥xima verificaci√≥n:** Despu√©s de pr√≥xima actualizaci√≥n del plan
**Frecuencia recomendada:** Despu√©s de cada cambio mayor
```

---

## 22. PROMPT_CLEAN_REPO_KEEP_CONTRACTS

```markdown
# PROMPT: Limpiar Repositorio y Mantener Solo Contracts

## OBJETIVO
Eliminar todo el contenido del repositorio EXCEPTO el directorio `/workspace/` y su contenido, manteniendo el historial de Git completo y creando un commit descriptivo.

## ‚ö†Ô∏è ADVERTENCIA CR√çTICA
Esta operaci√≥n es **DESTRUCTIVA** e **IRREVERSIBLE**. Aseg√∫rate de:
1. Tener un backup completo del repositorio
2. Estar absolutamente seguro de que quieres eliminar todo excepto `/workspace/`
3. Haber verificado que `/workspace/` contiene todo lo necesario

## CONTEXTO
- **Directorio a preservar**: `/workspace/` y todo su contenido (contracts/, plan/, prompt/, extra/)
- **Archivo a preservar**: `CLAUDE.md` (notas de desarrollo)
- **Archivos Git a preservar**: `.git/`, `.gitignore`, `.gitmessage` (si existe)
- **Directorios a eliminar**: backend/, frontend/, scripts/, classsphere-backend/, etc.
- **Historial Git**: Se mantiene intacto
- **Acci√≥n**: Crear commit completo documentando la limpieza

## PASO 1: VERIFICAR ESTADO ACTUAL

**Comandos de verificaci√≥n:**
```bash
# Ver estructura actual del repositorio
tree -L 2 -a

# Ver qu√© hay en workspace/
ls -la workspace/

# Ver tama√±o de workspace/
du -sh workspace/

# Ver archivos en Git
git ls-files

# Ver estado actual
git status
```

## PASO 2: CREAR BACKUP DE SEGURIDAD

**‚ö†Ô∏è OBLIGATORIO antes de continuar:**
```bash
# Crear backup completo
cd ..
tar -czf classsphere-backup-$(date +%Y%m%d-%H%M%S).tar.gz ClassSphere/
ls -lh classsphere-backup-*.tar.gz

# Verificar backup
tar -tzf classsphere-backup-*.tar.gz | head -20

# Volver al repositorio
cd ClassSphere/
```

## PASO 3: IDENTIFICAR ARCHIVOS A ELIMINAR

**Comandos de an√°lisis:**
```bash
# Listar todos los directorios de primer nivel
ls -d */ | grep -v "workspace/"

# Listar todos los archivos de primer nivel
ls -p | grep -v /

# Ver todo lo que NO es workspace/
find . -maxdepth 1 ! -name "." ! -name ".git" ! -name "workspace" -type d
find . -maxdepth 1 ! -name "." ! -name ".git" ! -name "workspace" ! -name "CLAUDE.md" ! -name ".gitignore" ! -name ".gitmessage" -type f
```

**Directorios t√≠picos a eliminar:**
- backend/
- frontend/
- scripts/
- classsphere-backend/
- .benchmarks/
- node_modules/ (si existe)
- venv/ (si existe)
- __pycache__/ (si existe)
- contracts/ (si est√° duplicado fuera de workspace/)

**Archivos t√≠picos a eliminar:**
- README.md (si existe)
- package.json (si existe)
- requirements.txt (si existe)
- go.mod, go.sum (si existen en ra√≠z)
- Cualquier otro archivo de configuraci√≥n en ra√≠z

**Archivos a preservar (OBLIGATORIO):**
- CLAUDE.md (notas de desarrollo)
- .gitignore (configuraci√≥n Git)
- .gitmessage (mensaje de commit, si existe)
- .git/ (directorio completo de Git)

## PASO 4: ELIMINAR ARCHIVOS Y DIRECTORIOS

**Comandos de eliminaci√≥n:**
```bash
# Eliminar directorios (CUIDADO: IRREVERSIBLE)
rm -rf backend/
rm -rf frontend/
rm -rf scripts/
rm -rf classsphere-backend/
rm -rf .benchmarks/
rm -rf node_modules/
rm -rf venv/
rm -rf __pycache__/

# Eliminar contracts/ si est√° duplicado fuera de workspace/
rm -rf contracts/ 2>/dev/null || true

# Eliminar archivos ra√≠z (preservando CLAUDE.md, .gitignore, .gitmessage)
rm -f README.md
rm -f package.json
rm -f requirements.txt
rm -f go.mod
rm -f go.sum
rm -f angular.json
rm -f tsconfig.json

# O eliminar todos los archivos de ra√≠z EXCEPTO archivos Git y CLAUDE.md
find . -maxdepth 1 -type f ! -name ".gitignore" ! -name "CLAUDE.md" ! -name ".gitmessage" -delete

# Verificar que workspace/ sigue intacto
ls -la workspace/
tree workspace/ -L 2
```

## PASO 5: VERIFICAR ELIMINACI√ìN

**Comandos de verificaci√≥n:**
```bash
# Ver estructura resultante
tree -L 2 -a

# Debe mostrar solo:
# .
# ‚îú‚îÄ‚îÄ .git/              # Historial Git completo
# ‚îú‚îÄ‚îÄ .gitignore         # Configuraci√≥n Git
# ‚îú‚îÄ‚îÄ .gitmessage        # Mensaje de commit (si existe)
# ‚îú‚îÄ‚îÄ CLAUDE.md          # Notas de desarrollo
# ‚îî‚îÄ‚îÄ workspace/         # TODO PRESERVADO
#     ‚îú‚îÄ‚îÄ contracts/     # Especificaciones
#     ‚îú‚îÄ‚îÄ plan/          # Plan de desarrollo
#     ‚îú‚îÄ‚îÄ prompt/        # Prompts de gesti√≥n
#     ‚îî‚îÄ‚îÄ extra/         # Documentaci√≥n adicional

# Ver estado de Git
git status

# Debe mostrar muchos archivos eliminados
```

## PASO 6: AGREGAR CAMBIOS A GIT

**Comandos:**
```bash
# Agregar todos los cambios (eliminaciones)
git add -A

# Verificar qu√© se va a commitear
git status

# Ver resumen de cambios
git diff --staged --stat

# Ver archivos eliminados
git diff --staged --name-only --diff-filter=D | wc -l
```

## PASO 7: CREAR COMMIT COMPLETO

**Mensaje de commit:**
```bash
git commit -m "[repo] Clean repository - Keep only workspace directory

DESTRUCTIVE OPERATION: Removed all implementation code and kept only documentation.

Directories removed:
- backend/ (Go + Echo application code)
- frontend/ (Angular 19 application code)
- scripts/ (automation scripts)
- classsphere-backend/ (compiled binaries)
- .benchmarks/ (performance benchmarks)
- node_modules/ (if existed)
- venv/ (if existed)
- contracts/ (if duplicated outside workspace/)

Files removed:
- README.md (project readme)
- package.json (frontend dependencies)
- requirements.txt (backend dependencies)
- go.mod, go.sum (backend dependencies)
- angular.json, tsconfig.json (frontend config)
- All other root-level files (except Git files and CLAUDE.md)

Directories preserved:
- workspace/ (complete documentation and planning)
  - workspace/contracts/ (specifications)
  - workspace/plan/ (development plan with Go + Angular)
  - workspace/prompt/ (management prompts)
  - workspace/extra/ (best practices, guides)

Files preserved:
- CLAUDE.md (development notes and context)
- .gitignore (Git ignore rules)
- .gitmessage (commit message template, if exists)
- .git/ (complete Git history)

Reason for cleanup:
Repository restructuring to maintain only documentation and specifications.
All implementation code removed to focus on planning and design phase.

Git history:
- Full Git history preserved
- All commits maintained
- Branch history intact

Backup created:
- File: classsphere-backup-YYYYMMDD-HHMMSS.tar.gz
- Location: Parent directory
- Size: [size]

Next steps:
1. Verify workspace/ integrity
2. Push to remote if needed
3. Start fresh implementation from plan
4. Use workspace/plan/ as source of truth
5. Implement Go + Angular stack from workspace/contracts/ specs

Verification commands:
- tree -L 2 -a
- ls -la workspace/
- git log --oneline -10

Status: ‚úÖ Repository cleaned successfully
Impact: MAJOR - All implementation code removed
Stack: Go 1.21+ (backend) + Angular 19 (frontend)
Reversibility: Use backup file to restore if needed"
```

## PASO 8: VERIFICAR COMMIT

**Comandos de verificaci√≥n:**
```bash
# Ver commit creado
git log -1

# Ver estad√≠sticas del commit
git log -1 --stat

# Ver archivos eliminados en el commit
git show HEAD --name-only --diff-filter=D

# Ver archivos que quedan en el repositorio
git ls-files

# Verificar que contracts/ est√° completo
git ls-files | grep "^contracts/"
```

## PASO 9: VALIDAR INTEGRIDAD DE WORKSPACE

**Comandos de validaci√≥n:**
```bash
# Verificar estructura de workspace/
tree workspace/

# Verificar archivos principales
ls -la workspace/plan/
ls -la workspace/contracts/
ls -la workspace/prompt/
ls -la workspace/extra/

# Contar archivos en workspace/
find workspace/ -type f | wc -l

# Verificar que no hay archivos corruptos
find workspace/ -type f -exec file {} \; | grep -v "text"

# Verificar tama√±o total
du -sh workspace/

# Verificar archivos Git preservados
ls -la .git/ .gitignore .gitmessage CLAUDE.md 2>/dev/null
```

## PASO 10: PUSH A REMOTO (OPCIONAL)

**‚ö†Ô∏è Solo si est√°s seguro:**
```bash
# Ver remoto configurado
git remote -v

# Push del commit (CUIDADO: esto es permanente en el remoto)
git push origin main

# O crear una nueva rama para la limpieza
git checkout -b repo-cleanup
git push origin repo-cleanup
```

## OUTPUT ESPERADO: RESUMEN EJECUTIVO

# Resumen Ejecutivo: Limpieza de Repositorio

## üéØ Objetivo Cumplido
Repositorio limpiado exitosamente, manteniendo solo `/workspace/` y historial Git completo.

## üìä Estad√≠sticas de Limpieza

### Directorios Eliminados
- ‚úÖ backend/ (Go + Echo code)
- ‚úÖ frontend/ (Angular 19 code)
- ‚úÖ scripts/ (automation scripts)
- ‚úÖ classsphere-backend/ (compiled binaries)
- ‚úÖ .benchmarks/ (performance tests)
- ‚úÖ node_modules/ (si exist√≠a)
- ‚úÖ venv/ (si exist√≠a)
- ‚úÖ contracts/ (si estaba duplicado fuera de workspace/)

**Total directorios eliminados:** 7-8

### Archivos Eliminados
- ‚úÖ README.md
- ‚úÖ package.json
- ‚úÖ requirements.txt
- ‚úÖ go.mod, go.sum
- ‚úÖ angular.json, tsconfig.json
- ‚úÖ Otros archivos de configuraci√≥n en ra√≠z

**Total archivos eliminados:** ~60+

### Contenido Preservado en /workspace/
- ‚úÖ workspace/contracts/ (12 archivos de especificaciones)
- ‚úÖ workspace/plan/ (10 archivos del plan Go + Angular)
- ‚úÖ workspace/prompt/ (1 archivo de gesti√≥n)
- ‚úÖ workspace/extra/ (archivos de mejores pr√°cticas)

### Archivos Git y Desarrollo Preservados
- ‚úÖ CLAUDE.md (notas de desarrollo)
- ‚úÖ .gitignore (configuraci√≥n Git)
- ‚úÖ .gitmessage (template de commit, si existe)
- ‚úÖ .git/ (historial completo)

**Total archivos preservados:** ~35+

## üìà Estructura Resultante

```
ClassSphere/
‚îú‚îÄ‚îÄ .git/                         # ‚úÖ Historial completo preservado
‚îú‚îÄ‚îÄ .gitignore                    # ‚úÖ Configuraci√≥n Git
‚îú‚îÄ‚îÄ .gitmessage                   # ‚úÖ Template de commit (si existe)
‚îú‚îÄ‚îÄ CLAUDE.md                     # ‚úÖ Notas de desarrollo
‚îî‚îÄ‚îÄ workspace/                    # ‚úÖ TODO PRESERVADO
    ‚îú‚îÄ‚îÄ contracts/                # Especificaciones Go + Angular
    ‚îÇ   ‚îú‚îÄ‚îÄ 00_ClassSphere_index.md
    ‚îÇ   ‚îú‚îÄ‚îÄ 01_ClassSphere_info_status.md
    ‚îÇ   ‚îú‚îÄ‚îÄ 02_ClassSphere_glosario_tecnico.md
    ‚îÇ   ‚îú‚îÄ‚îÄ 05_ClassSphere_arquitectura.md
    ‚îÇ   ‚îú‚îÄ‚îÄ 09_ClassSphere_testing.md
    ‚îÇ   ‚îú‚îÄ‚îÄ 10_ClassSphere_plan_implementacion.md
    ‚îÇ   ‚îî‚îÄ‚îÄ ... (12 archivos totales)
    ‚îú‚îÄ‚îÄ plan/                     # Plan Go 1.21+ + Angular 19
    ‚îÇ   ‚îú‚îÄ‚îÄ 01_plan_index.md
    ‚îÇ   ‚îú‚îÄ‚îÄ 02_plan_fase1_fundaciones.md (Go + Angular)
    ‚îÇ   ‚îú‚îÄ‚îÄ 03_plan_fase2_google_integration.md
    ‚îÇ   ‚îú‚îÄ‚îÄ 04_plan_fase3_visualizacion.md
    ‚îÇ   ‚îú‚îÄ‚îÄ 05_plan_fase4_integracion.md
    ‚îÇ   ‚îú‚îÄ‚îÄ 06_plan_testing_strategy.md (testify + Jasmine)
    ‚îÇ   ‚îú‚îÄ‚îÄ 07_plan_security_protocols.md
    ‚îÇ   ‚îú‚îÄ‚îÄ 08_plan_context_management.md
    ‚îÇ   ‚îú‚îÄ‚îÄ 09_plan_evaluation_metrics.md
    ‚îÇ   ‚îî‚îÄ‚îÄ README.md
    ‚îú‚îÄ‚îÄ prompt/                   # Prompts de gesti√≥n
    ‚îÇ   ‚îî‚îÄ‚îÄ manage_plan_prompts.md
    ‚îî‚îÄ‚îÄ extra/                    # Mejores pr√°cticas
        ‚îî‚îÄ‚îÄ (archivos de gu√≠as)
```

## ‚úÖ Validaciones Realizadas

- ‚úÖ Backup creado: classsphere-backup-YYYYMMDD-HHMMSS.tar.gz
- ‚úÖ Estructura workspace/ intacta
- ‚úÖ Todos los archivos de workspace/ preservados
- ‚úÖ Archivos Git preservados (.git/, .gitignore, .gitmessage)
- ‚úÖ CLAUDE.md preservado
- ‚úÖ Historial Git completo mantenido
- ‚úÖ Commit descriptivo creado
- ‚úÖ No hay archivos corruptos
- ‚úÖ Tama√±o de workspace/: ~540KB

## üìù Commit Creado

**Hash:** [commit-hash]
**Mensaje:** [repo] Clean repository - Keep only workspace directory
**Archivos modificados:** ~70 eliminaciones
**L√≠neas eliminadas:** ~60,000+
**Tama√±o reducido:** ~95% del repositorio
**Stack preservado:** Go 1.21+ + Angular 19 (en workspace/)

## ‚ö†Ô∏è Informaci√≥n Importante

### Reversibilidad
- **Backup disponible:** classsphere-backup-YYYYMMDD-HHMMSS.tar.gz
- **Ubicaci√≥n:** Directorio padre
- **Restauraci√≥n:** `tar -xzf classsphere-backup-*.tar.gz`

### Historial Git
- **Commits preservados:** Todos
- **Branches preservados:** Todas
- **Tags preservados:** Todos
- **Archivos Git:** .git/, .gitignore, .gitmessage preservados
- **Acceso a c√≥digo anterior:** `git checkout <commit-hash>`

### Pr√≥ximos Pasos
1. ‚úÖ Verificar integridad de workspace/
2. ‚è≥ Push a remoto (si es necesario)
3. ‚è≥ Comenzar implementaci√≥n desde plan con Go + Angular
4. ‚è≥ Usar workspace/plan/ como fuente de verdad
5. ‚è≥ Leer especificaciones de workspace/contracts/

## üìà Estado General
‚úÖ LIMPIEZA EXITOSA - Repositorio optimizado para documentaci√≥n

**Impacto:** MAJOR (c√≥digo eliminado, documentaci√≥n preservada)
**Reversibilidad:** ALTA (backup completo disponible)
**Riesgo:** BAJO (contracts/ verificado e intacto)
```

---

## ‚ö†Ô∏è CHECKLIST DE SEGURIDAD

Antes de ejecutar este prompt, verifica:

- [ ] **Backup creado y verificado**
- [ ] **Est√°s en el repositorio correcto**
- [ ] **Entiendes que esto es irreversible sin backup**
- [ ] **Has revisado qu√© hay en contracts/**
- [ ] **No hay trabajo sin commitear que necesites**
- [ ] **Tienes permisos para hacer esta operaci√≥n**
- [ ] **Has informado al equipo (si aplica)**

## üîÑ Comandos de Restauraci√≥n (Si es necesario)

```bash
# Si necesitas restaurar desde backup
cd ..
tar -xzf classsphere-backup-YYYYMMDD-HHMMSS.tar.gz
cd ClassSphere/

# O revertir el commit (antes de push)
git reset --hard HEAD~1

# O crear nueva rama desde commit anterior
git checkout -b restore-code HEAD~1
```

---

## 23. PROMPT_ANALYZE_UNIFIED_PLAN_SPECS

```markdown
# PROMPT: An√°lisis Unificado de Plan y Especificaciones ClassSphere

## OBJETIVO PRINCIPAL
Realizar an√°lisis completo de trazabilidad, coherencia, dependencias, patrones, completitud, complejidad, riesgos y calidad para el plan de desarrollo (/contracts/plan/) o las especificaciones (/contracts/principal/).

## PREGUNTA INICIAL
¬øEste an√°lisis es para:
1. **Plan de desarrollo** (/contracts/plan/)
2. **Especificaciones** (/contracts/principal/)

Por favor, responde con "plan" o "especificaciones" para proceder.

---

## AN√ÅLISIS DEL PLAN (/contracts/plan/)

### 3. An√°lisis de Trazabilidad del Plan
Verificar que cada requisito de las especificaciones est√© cubierto en el plan de desarrollo.

**Scope:** `/contracts/plan/` - Prioridad: ALTA - Criterio: ‚â•95% cobertura

**Pasos clave:**
1. Extraer requisitos de especificaciones
2. Buscar cobertura en plan
3. Identificar gaps

**Comandos de verificaci√≥n:**
```bash
# Verificar requisitos clave
grep -r "FastAPI 0.104.1\|Next.js 15\|React 19" contracts/plan/
grep -r "JWT\|OAuth 2.0\|Google Classroom" contracts/plan/
grep -r "ApexCharts 5.3.5\|WebSocket\|WCAG 2.2 AA" contracts/plan/
```

### 4. An√°lisis de Coherencia del Plan
Validar consistencia de t√©rminos t√©cnicos en todo el plan.

**Scope:** `/contracts/plan/` - Prioridad: ALTA - Criterio: ‚â•85% coherencia

**T√©rminos a validar:**
- Versiones: FastAPI 0.104.1, Next.js 15, React 19, Pydantic v2, ApexCharts 5.3.5
- Configuraciones: Puerto 8000, Cobertura ‚â•80%, Testing Vitest + Playwright
- Metodolog√≠a: TDD estricto, Cero confianza, WCAG 2.2 AA

### 5. An√°lisis de Dependencias del Plan
Verificar que dependencias cr√≠ticas entre fases est√©n documentadas.

**Dependencias a validar:**
- Fase 2 requiere Fase 1 completada
- Fase 3 requiere Fase 2 completada
- Fase 4 requiere Fase 3 completada

### 6. An√°lisis de Patrones del Plan
Verificar consistencia de patrones arquitect√≥nicos.

**Patrones a validar:**
1. TDD Estricto (Red-Green-Refactor)
2. Context-Aware Services (Chunking por prioridad)
3. Anti Lost-in-the-Middle (INICIO-MEDIO-FINAL)
4. Cero Confianza (Verificaci√≥n obligatoria)
5. Logs Estructurados (JSON, /tmp/)

### 7. An√°lisis de Completitud del Plan
Validar cobertura de funcionalidades en especificaciones.

**Funcionalidades a verificar:**
1. Autenticaci√≥n y Autorizaci√≥n
2. Google Classroom Integration
3. Dashboards por Rol
4. Visualizaciones Avanzadas
5. Sistema de B√∫squeda
6. Notificaciones
7. M√©tricas y Analytics
8. Accesibilidad
9. Testing
10. CI/CD Pipeline

### 8. An√°lisis de Complejidad del Plan
Analizar complejidad de instrucciones para ejecutabilidad.

**M√©tricas:**
- D√≠as totales, Pasos promedio/d√≠a, Comandos promedio/paso
- Condicionales por secci√≥n, Nivel de anidaci√≥n
- Umbrales: ‚â§10 pasos/d√≠a, ‚â§5 comandos/paso, ‚â§3 condicionales

### 9. An√°lisis de Riesgos del Plan
Identificar y validar mitigaci√≥n de riesgos t√©cnicos.

**Riesgos a validar:**
1. Dependencias Externas (Google API)
2. Compatibilidad de Versiones
3. Timeouts de Testing
4. Performance
5. Security Vulnerabilities
6. Context Window Overflow
7. Testing Coverage
8. OAuth Failures

### 10. An√°lisis de Calidad del Plan
Evaluar calidad global usando m√©tricas objetivas.

**M√©tricas:**
1. Precisi√≥n (‚â•95%)
2. Completitud (100%)
3. Coherencia (‚â•85%)
4. Seguridad (100%)
5. Calidad Global (‚â•90%)

---

## AN√ÅLISIS DE ESPECIFICACIONES (/contracts/principal/)

### 11. An√°lisis de Trazabilidad de Especificaciones
Verificar que requisitos est√©n claramente definidos y trazables.

**Scope:** `/contracts/principal/` - Prioridad: ALTA - Criterio: 100% identificables

### 12. An√°lisis de Coherencia de Especificaciones
Validar consistencia de t√©rminos t√©cnicos.

### 13. An√°lisis de Dependencias de Especificaciones
Verificar que dependencias est√©n identificadas.

### 14. An√°lisis de Patrones de Especificaciones
Verificar definici√≥n clara de patrones arquitect√≥nicos.

### 15. An√°lisis de Completitud de Especificaciones
Verificar cobertura de √°reas del sistema.

### 16. An√°lisis de Complejidad de Especificaciones
Evaluar claridad y simplicidad.

### 17. An√°lisis de Riesgos de Especificaciones
Verificar identificaci√≥n de riesgos t√©cnicos.

### 18. An√°lisis de Calidad de Especificaciones
Evaluar calidad global de especificaciones.

---

## EJECUCI√ìN DEL AN√ÅLISIS

**Basado en tu respuesta:**

**Si respondes "plan":**
- Ejecutar an√°lisis completo del plan usando m√©tricas 3-10
- Usar comandos espec√≠ficos para `/contracts/plan/`
- Generar resumen ejecutivo con resultados del plan

**Si respondes "especificaciones":**
- Ejecutar an√°lisis completo de especificaciones usando m√©tricas 11-18
- Usar comandos espec√≠ficos para `/contracts/principal/`
- Generar resumen ejecutivo con resultados de especificaciones

**Comandos generales de verificaci√≥n (adaptar seg√∫n respuesta):**
```bash
# Para plan
grep -r "t√©rmino_buscado" contracts/plan/

# Para especificaciones
grep -r "t√©rmino_buscado" contracts/principal/

# Contar menciones
echo "T√©rmino: $(grep -rc "t√©rmino" contracts/plan/ | awk -F: '{sum+=$2} END {print sum}')"
```

## OUTPUT ESPERADO: RESUMEN EJECUTIVO

# Resumen Ejecutivo: An√°lisis Unificado [Plan/Especificaciones]

## üéØ Objetivo Cumplido
An√°lisis completo de [trazabilidad/coherencia/dependencias/etc.] para [plan/especificaciones].

## üìä Resultados Principales

### M√©tricas de An√°lisis
- **Trazabilidad:** X% (objetivo: ‚â•95%)
- **Coherencia:** X% (objetivo: ‚â•85%)
- **Dependencias:** X% documentadas (objetivo: 100%)
- **Patrones:** X% consistentes (objetivo: ‚â•80%)
- **Completitud:** X% (objetivo: ‚â•95%)
- **Complejidad:** [LOW/MEDIUM] (objetivo: ‚â§MEDIUM)
- **Riesgos:** X/X mitigados (objetivo: 100%)
- **Calidad:** X% (objetivo: ‚â•90%)

## ‚ö†Ô∏è Hallazgos Cr√≠ticos
[Detallar gaps o problemas encontrados]

## ‚úÖ Recomendaciones
1. [Acci√≥n inmediata]
2. [Acci√≥n a corto plazo]
3. [Acci√≥n a largo plazo]

## üìà Estado General
‚úÖ [PASS/NEEDS_IMPROVEMENT] - [Porcentaje] cumplimiento promedio

**Pr√≥xima verificaci√≥n:** Despu√©s de pr√≥xima actualizaci√≥n
**Frecuencia recomendada:** Despu√©s de cambios mayores
```

---

# FIN DEL DOCUMENTO

## üìù Notas Finales

**Total de prompts:** 23
**Fecha de creaci√≥n:** 2025-10-05
**Versi√≥n:** 1.0

**C√≥mo usar este documento:**
1. Identificar la operaci√≥n deseada (crear, actualizar, analizar)
2. Copiar el prompt correspondiente
3. Pegar en chat con LLM
4. Revisar resumen ejecutivo generado
5. Tomar acciones seg√∫n recomendaciones

**Mantenimiento:**
- Actualizar prompts si cambian especificaciones
- Agregar nuevos prompts si se identifican necesidades
- Validar que outputs sigan formato de resumen ejecutivo

---

*√öltima actualizaci√≥n: 2025-10-06T16:42:34-03:00*
